// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'main.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2022-09-04 12:20:38.474698
// **************************************************************************
// CONFIG
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/.dart_tool/..//lib/swift_composer.di.yaml
// no config file for module_fruit: /home/fsw/workspace/swift_shop/packages/swift_composer/example/module_fruits.di.yaml
// no config file for module_banana: /home/fsw/workspace/swift_shop/packages/swift_composer/example/module_banana.di.yaml
// no config file for module_price: /home/fsw/workspace/swift_shop/packages/swift_composer/example/module_price.di.yaml
// no config file for module_discount: /home/fsw/workspace/swift_shop/packages/swift_composer/example/module_discount.di.yaml
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/example/main.di.yaml
// **************************************************************************
// MERGED CONFIG
// **************************************************************************
// ALL TYPES INFO
// **************************************************************************
// SubtypesOf => SubtypesOf  GENERIC [T = T   473656069 = 473656069   473656069 = TypeParameterTypeImpl]
// AnnotatedWith => AnnotatedWith   [      ]
// Pluggable => Pluggable   [      ]
// TypePlugin => TypePlugin  GENERIC [T = T   380287154 = 380287154   380287154 = TypeParameterTypeImpl]
// module_fruit.AllAvailableFruits => module_fruit.AllAvailableFruits INTERCEPTED  [      ]
// module_fruit.Fruit => module_fruit.Fruit INTERCEPTED  [      ]
// module_banana.Banana => module_banana.Banana INTERCEPTED  [      ]
// module_price.PricePlugin => module_price.PricePlugin INTERCEPTED  [T = Fruit   380287154 = 340598321   380287154 = InterfaceTypeImpl]
// module_discount.DiscountPlugin => module_discount.DiscountPlugin INTERCEPTED  [T = Fruit   380287154 = 340598321   380287154 = InterfaceTypeImpl]
// Object => Object   [      ]
// String => String   [T = String   99862877 = 55285317   99862877 = InterfaceTypeImpl]
// List<String> => List<String>   [T = E,E = String   265238202 = 263610483,263610483 = 55285317   265238202 = TypeParameterTypeImpl,263610483 = InterfaceTypeImpl]
// T => T   [      ]
// List<T> => List<T>   [T = E,E = T   265238202 = 263610483,263610483 = 473656069   265238202 = TypeParameterTypeImpl,263610483 = TypeParameterTypeImpl]
// dynamic => dynamic   [      ]
// ST => ST   [      ]
// double => double   [T = num   99862877 = 235444537   99862877 = InterfaceTypeImpl]
// Map<dynamic,dynamic> => Map<dynamic,dynamic>   [K = dynamic,V = dynamic   56096514 = 1,255678796 = 1   56096514 = DynamicTypeImpl,255678796 = DynamicTypeImpl]
// void => void   [      ]
// TypePlugin<module_fruit.Fruit> => TypePlugin<module_fruit.Fruit>   [T = Fruit   380287154 = 340598321   380287154 = InterfaceTypeImpl]
// List<dynamic> => List<dynamic>   [T = E,E = dynamic   265238202 = 263610483,263610483 = 1   265238202 = TypeParameterTypeImpl,263610483 = DynamicTypeImpl]
// **************************************************************************
// no interceptor for [SubtypesOf]
// type arguments[1]:
// T[473656069] => T[473656069]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 473656069
// argument: T 473656069
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [AnnotatedWith]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: AnnotatedWith 1
// TYPE PATH:
//  AnnotatedWith
// **************************************************************************
// no interceptor for [Pluggable]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: Pluggable 1
// TYPE PATH:
//  Pluggable
// **************************************************************************
// no interceptor for [TypePlugin]
// type arguments[1]:
// T[380287154] => T[380287154]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 380287154
// argument: T 380287154
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// interceptor for [module_fruit.AllAvailableFruits]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_fruit.AllAvailableFruits 1
// TYPE PATH:
//  module_fruit.AllAvailableFruits
class $module_fruit_AllAvailableFruits extends module_fruit.AllAvailableFruits
    implements Pluggable {
  $module_fruit_AllAvailableFruits() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

//method createFruit override
  module_fruit.Fruit createFruit(String className, String name) {
    switch (className) {
      case 'module_fruit.Fruit':
        return new $module_fruit_Fruit(name);
      case 'module_banana.Banana':
        return new $module_banana_Banana(name);
    }
    throw new Exception('no type for ' + className);
  }
}

// **************************************************************************
// interceptor for [module_fruit.Fruit]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// plugin: module_price.PricePlugin
// plugin: module_discount.DiscountPlugin
// CONFIG
// config: module_fruit.Fruit 1
// TYPE PATH:
//  module_fruit.Fruit
class $module_fruit_Fruit extends module_fruit.Fruit implements Pluggable {
  late module_price.PricePlugin module_price_PricePlugin;
  late module_discount.DiscountPlugin module_discount_DiscountPlugin;
  $module_fruit_Fruit(name) {
//String
    this.name = name;
//double
//double
//double
//double
    module_price_PricePlugin = new $module_price_PricePlugin(this);
    module_discount_DiscountPlugin = new $module_discount_DiscountPlugin(this);
  }
  T plugin<T>() {
    if (T == module_price.PricePlugin) {
      return module_price_PricePlugin as T;
    }
    if (T == module_discount.DiscountPlugin) {
      return module_discount_DiscountPlugin as T;
    }
    throw new Exception('no plugin for this type');
  }

// String name
// c: String
// double weight
// c: double
// double length
// c: double
// double height
// c: double
// double width
// c: double
// String className
// c: String
  String get className => "module_fruit.Fruit";
//method getFullName override
  String getFullName(String prefix, String suffix) {
    List<dynamic> args = [prefix, suffix];
    args = module_price_PricePlugin.beforeGetFullName(args[0], args[1]);
    prefix = args[0];
    suffix = args[1];
    var ret = super.getFullName(prefix, suffix);
    ret = module_price_PricePlugin.afterGetFullName(ret);
    ret = module_discount_DiscountPlugin.afterGetFullName(ret);
    return ret;
  }

//method fieldsToJson override
  void fieldsToJson(Map<dynamic, dynamic> target) {
//compiled method
//@JsonEncode
// String
// String
    {
      target['name'] = this.name;
    }
//@JsonEncode
// double
// double
    {
      target['weight'] = this.weight;
    }
// double
// double
    {
      target['length'] = this.length;
    }
// double
// double
    {
      target['height'] = this.height;
    }
// double
// double
    {
      target['width'] = this.width;
    }
  }
}

// **************************************************************************
// interceptor for [module_banana.Banana]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Fruit [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// plugin: module_price.PricePlugin
// plugin: module_discount.DiscountPlugin
// CONFIG
// config: module_banana.Banana 1
// config: module_fruit.Fruit 2
// TYPE PATH:
//  module_banana.Banana
//  module_fruit.Fruit
class $module_banana_Banana extends module_banana.Banana implements Pluggable {
  late module_price.PricePlugin module_price_PricePlugin;
  late module_discount.DiscountPlugin module_discount_DiscountPlugin;
  $module_banana_Banana(name) {
//double
//String
    this.name = name;
//double
//double
//double
//double
    module_price_PricePlugin = new $module_price_PricePlugin(this);
    module_discount_DiscountPlugin = new $module_discount_DiscountPlugin(this);
  }
  T plugin<T>() {
    if (T == module_price.PricePlugin) {
      return module_price_PricePlugin as T;
    }
    if (T == module_discount.DiscountPlugin) {
      return module_discount_DiscountPlugin as T;
    }
    throw new Exception('no plugin for this type');
  }

// double curvative
// c: double
// String name
// c: String
// double weight
// c: double
// double length
// c: double
// double height
// c: double
// double width
// c: double
// String className
// c: String
  String get className => "module_banana.Banana";
//method getFullName override
  String getFullName(String prefix, String suffix) {
    List<dynamic> args = [prefix, suffix];
    args = module_price_PricePlugin.beforeGetFullName(args[0], args[1]);
    prefix = args[0];
    suffix = args[1];
    var ret = super.getFullName(prefix, suffix);
    ret = module_price_PricePlugin.afterGetFullName(ret);
    ret = module_discount_DiscountPlugin.afterGetFullName(ret);
    return ret;
  }

//method fieldsToJson override
  void fieldsToJson(Map<dynamic, dynamic> target) {
//compiled method
//@JsonEncode
// String
// String
    {
      target['name'] = this.name;
    }
//@JsonEncode
// double
// double
    {
      target['curvative'] = this.curvative;
    }
// double
// double
    {
      target['weight'] = this.weight;
    }
// double
// double
    {
      target['length'] = this.length;
    }
// double
// double
    {
      target['height'] = this.height;
    }
// double
// double
    {
      target['width'] = this.width;
    }
  }
}

// **************************************************************************
// interceptor for [module_price.PricePlugin]
// type arguments[1]:
// T[380287154] => Fruit[340598321]
// type arguments[2]:
// can be singleton: FALSE
// parent: TypePlugin [@bool get ComposeSubtypes]
// parameter: T 380287154
// argument: Fruit 340598321
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_price.PricePlugin 1
// config: TypePlugin 2
// TYPE PATH:
//  module_price.PricePlugin
//  TypePlugin
class $module_price_PricePlugin extends module_price.PricePlugin
    implements Pluggable {
  $module_price_PricePlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
// double price
// c: double
// module_fruit.Fruit parent
// c: module_fruit.Fruit
// c: module_banana.Banana
}

// **************************************************************************
// interceptor for [module_discount.DiscountPlugin]
// type arguments[1]:
// T[380287154] => Fruit[340598321]
// type arguments[2]:
// can be singleton: FALSE
// parent: TypePlugin [@bool get ComposeSubtypes]
// parameter: T 380287154
// argument: Fruit 340598321
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_discount.DiscountPlugin 1
// config: TypePlugin 2
// TYPE PATH:
//  module_discount.DiscountPlugin
//  TypePlugin
class $module_discount_DiscountPlugin extends module_discount.DiscountPlugin
    implements Pluggable {
  $module_discount_DiscountPlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
// double discountedPrice
// c: double
// module_fruit.Fruit parent
// c: module_fruit.Fruit
// c: module_banana.Banana
}

// **************************************************************************
// no interceptor for [Object]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// CONFIG
// config: Object 1
// TYPE PATH:
//  Object
// **************************************************************************
// no interceptor for [String]
// type arguments[1]:
// T[99862877] => String[55285317]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: String 55285317
// parent: Pattern []
// CONFIG
// config: String 1
// TYPE PATH:
//  String
// **************************************************************************
// no interceptor for [List<String>]
// type arguments[1]:
// T[265238202] => E[263610483]
// E[268730869] => E[263610483]
// E[263610483] => String[55285317]
// type arguments[2]:
// ENCLOSING: XXX
// String[834708055]
// can be singleton: FALSE
// parameter: E 263610483
// argument: E 263610483
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 265238202
// argument: E 263610483
// parent: Iterable []
// parameter: E 268730869
// argument: E 263610483
// CONFIG
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [T]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [List<T>]
// type arguments[1]:
// T[265238202] => E[263610483]
// E[268730869] => E[263610483]
// E[263610483] => T[473656069]
// type arguments[2]:
// ENCLOSING: NULL
// T[258331383]
// can be singleton: FALSE
// parameter: E 263610483
// argument: E 263610483
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 265238202
// argument: E 263610483
// parent: Iterable []
// parameter: E 268730869
// argument: E 263610483
// CONFIG
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [dynamic]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [ST]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [double]
// type arguments[1]:
// T[99862877] => num[235444537]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: num 235444537
// CONFIG
// config: double 1
// config: num 2
// TYPE PATH:
//  double
//  num
// **************************************************************************
// no interceptor for [Map<dynamic,dynamic>]
// type arguments[1]:
// K[56096514] => dynamic[1]
// V[255678796] => dynamic[1]
// type arguments[2]:
// ENCLOSING: NULL
// dynamic[704960310]
// ENCLOSING: NULL
// dynamic[704960310]
// can be singleton: FALSE
// parameter: K 56096514
// parameter: V 255678796
// argument: K 56096514
// argument: V 255678796
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: Map 1
// TYPE PATH:
//  Map
// **************************************************************************
// no interceptor for [void]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [TypePlugin<module_fruit.Fruit>]
// type arguments[1]:
// T[380287154] => Fruit[340598321]
// type arguments[2]:
// ENCLOSING: XXX
// Fruit[55131122]
// can be singleton: FALSE
// parameter: T 380287154
// argument: T 380287154
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// no interceptor for [List<dynamic>]
// type arguments[1]:
// T[265238202] => E[263610483]
// E[268730869] => E[263610483]
// E[263610483] => dynamic[1]
// type arguments[2]:
// ENCLOSING: NULL
// dynamic[704960310]
// can be singleton: FALSE
// parameter: E 263610483
// argument: E 263610483
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 265238202
// argument: E 263610483
// parent: Iterable []
// parameter: E 268730869
// argument: E 263610483
// CONFIG
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [SubtypesOf<T>]
// type arguments[1]:
// T[473656069] => T[473656069]
// type arguments[2]:
// ENCLOSING: NULL
// T[258331383]
// can be singleton: FALSE
// parameter: T 473656069
// argument: T 473656069
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [TypePlugin<T>]
// type arguments[1]:
// T[380287154] => T[380287154]
// type arguments[2]:
// ENCLOSING: NULL
// T[258331383]
// can be singleton: FALSE
// parameter: T 380287154
// argument: T 380287154
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// no interceptor for [num]
// type arguments[1]:
// T[99862877] => num[235444537]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: num 235444537
// CONFIG
// config: num 1
// TYPE PATH:
//  num
// **************************************************************************
class $ObjectManager {
  $module_fruit_AllAvailableFruits? _module_fruit_AllAvailableFruits;
  $module_fruit_AllAvailableFruits get module_fruit_AllAvailableFruits {
    if (_module_fruit_AllAvailableFruits == null) {
      _module_fruit_AllAvailableFruits = new $module_fruit_AllAvailableFruits();
    }
    return _module_fruit_AllAvailableFruits as $module_fruit_AllAvailableFruits;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 34ms
