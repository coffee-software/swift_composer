// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'main.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2021-11-26 14:04:07.153569
// **************************************************************************
// import package:swift_composer/swift_composer.dart
// import asset:swift_composer/example/module_fruits.dart as module_fruit
// import asset:swift_composer/example/module_banana.dart as module_banana
// import asset:swift_composer/example/module_price.dart as module_price
// import asset:swift_composer/example/module_discount.dart as module_discount
// **************************************************************************
//no interceptor for [AnnotatedWith]
// **************************************************************************
//no interceptor for [Pluggable]
// **************************************************************************
//no interceptor for [TypePlugin]
// **************************************************************************
//interceptor for [module_fruit.AllAvailableFruits]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: module_fruit.AllAvailableFruits 1
//TYPE PATH:
//   module_fruit.AllAvailableFruits
class $module_fruit_AllAvailableFruits extends module_fruit.AllAvailableFruits
    implements Pluggable {
  $module_fruit_AllAvailableFruits() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

//candidate: AnnotatedWith
//element ok
//name not fit
//interceptor ok
//candidate: Pluggable
//element ok
//name not fit
//candidate: TypePlugin
//element ok
//candidate: module_fruit.AllAvailableFruits
//element ok
//name not fit
//interceptor ok
//candidate: module_fruit.Fruit
//element ok
//candidate: module_banana.Banana
//element ok
//name not fit
//interceptor ok
//candidate: module_price.PricePlugin
//element ok
//name not fit
//interceptor ok
//candidate: module_discount.DiscountPlugin
//element ok
//name not fit
//interceptor ok
  module_fruit.Fruit createFruit(String className, String name) {
    switch (className) {
      case 'module_fruit.Fruit':
        return new $module_fruit_Fruit(name);
      case 'module_banana.Banana':
        return new $module_banana_Banana(name);
    }
    throw new Exception('no type for ' + className);
  }
}

// **************************************************************************
//interceptor for [module_fruit.Fruit]
//type arguments[1]:
//type arguments[2]:
//can be singleton: FALSE
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//plugin: module_price.PricePlugin
//plugin: module_discount.DiscountPlugin
//CONFIG
//config: module_fruit.Fruit 1
//TYPE PATH:
//   module_fruit.Fruit
class $module_fruit_Fruit extends module_fruit.Fruit implements Pluggable {
  late module_price.PricePlugin module_price_PricePlugin;
  late module_discount.DiscountPlugin module_discount_DiscountPlugin;
  $module_fruit_Fruit(name) {
//String
    this.name = name;
//double
//double
//double
//double
    module_price_PricePlugin = new $module_price_PricePlugin(this);
    module_discount_DiscountPlugin = new $module_discount_DiscountPlugin(this);
  }
  T plugin<T>() {
    if (T == module_price.PricePlugin) {
      return module_price_PricePlugin as T;
    }
    if (T == module_discount.DiscountPlugin) {
      return module_discount_DiscountPlugin as T;
    }
    throw new Exception('no plugin for this type');
  }

  String get className => "module_fruit.Fruit";
  String getFullName(String prefix, String suffix) {
    List<dynamic> args = [prefix, suffix];
    args = module_price_PricePlugin.beforeGetFullName(args[0], args[1]);
    prefix = args[0];
    suffix = args[1];
    var ret = super.getFullName(prefix, suffix);
    ret = module_price_PricePlugin.afterGetFullName(ret);
    ret = module_discount_DiscountPlugin.afterGetFullName(ret);
    return ret;
  }

//NO ELEMENT!
//NO ELEMENT!
//NO ELEMENT!
//NO ELEMENT!
  void fieldsToJson(
//NO ELEMENT!
//NO ELEMENT!
      Map<dynamic, dynamic> target) {
//compiled method
//@JsonEncode
    {
      target['name'] = this.name;
    }
//@JsonEncode
    {
      target['weight'] = this.weight;
    }
    {
      target['length'] = this.length;
    }
    {
      target['height'] = this.height;
    }
    {
      target['width'] = this.width;
    }
  }
//NO ELEMENT!
//NO ELEMENT!
}

// **************************************************************************
//interceptor for [module_banana.Banana]
//type arguments[1]:
//type arguments[2]:
//can be singleton: FALSE
//parent: Fruit [@bool get Compose]
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//CONFIG
//config: module_banana.Banana 1
//config: module_fruit.Fruit 2
//TYPE PATH:
//   module_banana.Banana
//   module_fruit.Fruit
class $module_banana_Banana extends module_banana.Banana implements Pluggable {
  $module_banana_Banana(name) {
//double
//String
    this.name = name;
//double
//double
//double
//double
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  String get className => "module_banana.Banana";
//NO ELEMENT!
//NO ELEMENT!
//NO ELEMENT!
//NO ELEMENT!
  void fieldsToJson(
//NO ELEMENT!
//NO ELEMENT!
      Map<dynamic, dynamic> target) {
//compiled method
//@JsonEncode
    {
      target['name'] = this.name;
    }
//@JsonEncode
    {
      target['curvative'] = this.curvative;
    }
    {
      target['weight'] = this.weight;
    }
    {
      target['length'] = this.length;
    }
    {
      target['height'] = this.height;
    }
    {
      target['width'] = this.width;
    }
  }
//NO ELEMENT!
//NO ELEMENT!
}

// **************************************************************************
//interceptor for [module_price.PricePlugin]
//type arguments[1]:
//T[113598069] => Fruit[404759405]
//type arguments[2]:
//can be singleton: FALSE
//parent: TypePlugin [@bool get ComposeSubtypes]
//parameter: T 113598069
//argument: Fruit 404759405
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: module_price.PricePlugin 1
//config: TypePlugin<module_fruit.Fruit> 2
//TYPE PATH:
//   module_price.PricePlugin
//   TypePlugin<module_fruit.Fruit>
class $module_price_PricePlugin extends module_price.PricePlugin
    implements Pluggable {
  $module_price_PricePlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
//NO ELEMENT!
//NO ELEMENT!
}

// **************************************************************************
//interceptor for [module_discount.DiscountPlugin]
//type arguments[1]:
//T[113598069] => Fruit[404759405]
//type arguments[2]:
//can be singleton: FALSE
//parent: TypePlugin [@bool get ComposeSubtypes]
//parameter: T 113598069
//argument: Fruit 404759405
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: module_discount.DiscountPlugin 1
//config: TypePlugin<module_fruit.Fruit> 2
//TYPE PATH:
//   module_discount.DiscountPlugin
//   TypePlugin<module_fruit.Fruit>
class $module_discount_DiscountPlugin extends module_discount.DiscountPlugin
    implements Pluggable {
  $module_discount_DiscountPlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
//NO ELEMENT!
}

// **************************************************************************
//no interceptor for [String]
// **************************************************************************
//no interceptor for [double]
// **************************************************************************
//no interceptor for [dynamic]
// **************************************************************************
//no interceptor for [Map<dynamic,dynamic>]
// **************************************************************************
//no interceptor for [void]
// **************************************************************************
//no interceptor for [TypePlugin<module_fruit.Fruit>]
// **************************************************************************
//no interceptor for [List<dynamic>]
// **************************************************************************
//no interceptor for [ST]
// **************************************************************************
// All Types:
//AnnotatedWith AnnotatedWith
//Pluggable Pluggable
//TypePlugin TypePlugin
//module_fruit.AllAvailableFruits module_fruit.AllAvailableFruits
//module_fruit.Fruit module_fruit.Fruit
//module_banana.Banana module_banana.Banana
//module_price.PricePlugin module_price.PricePlugin
//module_discount.DiscountPlugin module_discount.DiscountPlugin
//String String
//double double
//dynamic dynamic
//Map<dynamic,dynamic> Map<dynamic,dynamic>
//void void
//TypePlugin<module_fruit.Fruit> TypePlugin<module_fruit.Fruit>
//List<dynamic> List<dynamic>
//ST ST
// **************************************************************************
class $ObjectManager {
  $module_fruit_AllAvailableFruits? _module_fruit_AllAvailableFruits;
  $module_fruit_AllAvailableFruits get module_fruit_AllAvailableFruits {
    if (_module_fruit_AllAvailableFruits == null) {
      _module_fruit_AllAvailableFruits = new $module_fruit_AllAvailableFruits();
    }
    return _module_fruit_AllAvailableFruits as $module_fruit_AllAvailableFruits;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 31ms
