// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'fields.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2022-09-04 12:20:39.476191
// **************************************************************************
// CONFIG
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/.dart_tool/..//lib/swift_composer.di.yaml
// config file for foo: /home/fsw/workspace/swift_shop/packages/swift_composer/test/fields/../lib/foo.di.yaml
// config file for bar: /home/fsw/workspace/swift_shop/packages/swift_composer/test/fields/../lib/bar.di.yaml
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/test/fields/fields.di.yaml
// **************************************************************************
// MERGED CONFIG
// foo.Foo: {stringField: FooField, integerField: 124}
// foo.FooChild: {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// foo.FooChild2: {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// bar.Bar: {stringField: BarStringField}
// bar.BarChild: {stringField: BarChildStringField}
// **************************************************************************
// ALL TYPES INFO
// **************************************************************************
// SubtypesOf => SubtypesOf  GENERIC [T = T   473656069 = 473656069   473656069 = TypeParameterTypeImpl]
// AnnotatedWith => AnnotatedWith   [      ]
// Pluggable => Pluggable   [      ]
// TypePlugin => TypePlugin  GENERIC [T = T   380287154 = 380287154   380287154 = TypeParameterTypeImpl]
// foo.Foo => foo.Foo INTERCEPTED  [      ]
// foo.FooChild => foo.FooChild INTERCEPTED  [      ]
// foo.FooChild2 => foo.FooChild2 INTERCEPTED  [      ]
// bar.Bar => bar.Bar INTERCEPTED  [      ]
// bar.BarChild => bar.BarChild INTERCEPTED  [      ]
// Base => Base   [      ]
// Container => Container INTERCEPTED  [      ]
// ChildContainer => ChildContainer INTERCEPTED  [      ]
// Object => Object   [      ]
// String => String   [T = String   99862877 = 55285317   99862877 = InterfaceTypeImpl]
// List<String> => List<String>   [T = E,E = String   265238202 = 263610483,263610483 = 55285317   265238202 = TypeParameterTypeImpl,263610483 = InterfaceTypeImpl]
// T => T   [      ]
// List<T> => List<T>   [T = E,E = T   265238202 = 263610483,263610483 = 473656069   265238202 = TypeParameterTypeImpl,263610483 = TypeParameterTypeImpl]
// dynamic => dynamic   [      ]
// ST => ST   [      ]
// int => int   [T = num   99862877 = 235444537   99862877 = InterfaceTypeImpl]
// double => double   [T = num   99862877 = 235444537   99862877 = InterfaceTypeImpl]
// bool => bool   [      ]
// Map<dynamic,dynamic> => Map<dynamic,dynamic>   [K = dynamic,V = dynamic   56096514 = 1,255678796 = 1   56096514 = DynamicTypeImpl,255678796 = DynamicTypeImpl]
// void => void   [      ]
// **************************************************************************
// no interceptor for [SubtypesOf]
// type arguments[1]:
// T[473656069] => T[473656069]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 473656069
// argument: T 473656069
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [AnnotatedWith]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: AnnotatedWith 1
// TYPE PATH:
//  AnnotatedWith
// **************************************************************************
// no interceptor for [Pluggable]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: Pluggable 1
// TYPE PATH:
//  Pluggable
// **************************************************************************
// no interceptor for [TypePlugin]
// type arguments[1]:
// T[380287154] => T[380287154]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 380287154
// argument: T 380287154
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// interceptor for [foo.Foo]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo 1
// config: stringField FooField
// config: integerField 124
// TYPE PATH:
//  foo.Foo
class $foo_Foo extends foo.Foo implements Pluggable {
  $foo_Foo() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String className
// c: String
  String get className => "foo.Foo";
// String stringField
// c: String
  String get stringField => "FooField";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [foo.FooChild]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.FooChild 1
// config: stringField FooChildField
// config: doubleField 0.55
// config: booleanField true
// config: foo.Foo 2
// config: integerField 124
// TYPE PATH:
//  foo.FooChild
//  foo.Foo
class $foo_FooChild extends foo.FooChild implements Pluggable {
  $foo_FooChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// double doubleField
// c: double
  double get doubleField => 0.55;
// bool booleanField
// c: bool
  bool get booleanField => true;
// String className
// c: String
  String get className => "foo.FooChild";
// String stringField
// c: String
  String get stringField => "FooChildField";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [foo.FooChild2]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.FooChild2 1
// config: stringField FooChild2Field
// config: doubleField 0.55
// config: booleanField true
// config: foo.Foo 2
// config: integerField 124
// TYPE PATH:
//  foo.FooChild2
//  foo.Foo
class $foo_FooChild2 extends foo.FooChild2 implements Pluggable {
  $foo_FooChild2(requiredString) {
//String
    this.requiredString = requiredString;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String requiredString
// c: String
// String className
// c: String
  String get className => "foo.FooChild2";
// String stringField
// c: String
  String get stringField => "FooChild2Field";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [bar.Bar]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: bar.Bar 1
// config: stringField BarStringField
// TYPE PATH:
//  bar.Bar
class $bar_Bar extends bar.Bar implements Pluggable {
  $bar_Bar() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// List<String> classNames
// c: List<String>
  List<String> get classNames => [];
// String stringField
// c: String
  String get stringField => "BarStringField";
}

// **************************************************************************
// interceptor for [bar.BarChild]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Bar [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: bar.BarChild 1
// config: stringField BarChildStringField
// config: bar.Bar 2
// TYPE PATH:
//  bar.BarChild
//  bar.Bar
class $bar_BarChild extends bar.BarChild implements Pluggable {
  $bar_BarChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// List<String> classNames
// c: List<String>
  List<String> get classNames => ['bar.BarChild'];
// String stringField
// c: String
  String get stringField => "BarChildStringField";
}

// **************************************************************************
// no interceptor for [Base]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: Base 1
// TYPE PATH:
//  Base
// **************************************************************************
// interceptor for [Container]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Base []
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: Container 1
// config: Base 2
// TYPE PATH:
//  Container
//  Base
class $Container extends Container implements Pluggable {
  $Container() {
//Foo
//create
//foo.Foo
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
    this.fifth = new $foo_Foo();
//Foo
//create
//foo.Foo
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
    this.one = new $foo_Foo();
//Foo
//create
//foo.Foo
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
    this.two = new $foo_Foo();
//FooChild
//create
//foo.FooChild
// c: foo.FooChild
    this.three = new $foo_FooChild();
//BarChild
//create
//bar.BarChild
// c: bar.BarChild
    this.four = new $bar_BarChild();
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// foo.Foo fifth
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
// foo.Foo one
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
// foo.Foo two
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
// foo.FooChild three
// c: foo.FooChild
// bar.BarChild four
// c: bar.BarChild
//method fieldsToJson override
  void fieldsToJson(Map<dynamic, dynamic> target) {
//compiled method
// foo.Foo
// Foo
    {
      target['fifth'] = this.fifth.stringField;
    }
// foo.Foo
// Foo
    {
      target['one'] = this.one.stringField;
    }
// foo.Foo
// Foo
    {
      target['two'] = this.two.stringField;
    }
// foo.FooChild
// Foo
    {
      target['three'] = this.three.stringField;
    }
// bar.BarChild
// Bar
    {
      target['four'] = this.four.classNames.join('');
    }
  }

//method createContainer override
  Container createContainer() {
//Container
    return new $Container();
  }

//method copyFieldsFromJson override
  void copyFieldsFromJson(Map<dynamic, dynamic> source) {
//compiled method
// foo.Foo
// Foo
    {
      this.fifth = createFooChild(source['fifth']);
    }
// foo.Foo
// Foo
    {
      this.one = createFooChild(source['one']);
    }
// foo.Foo
// Foo
    {
      this.two = createFooChild(source['two']);
    }
// foo.FooChild
// Foo
    {
      this.three = createFooChild(source['three']);
    }
// bar.BarChild
// Bar
    {
      this.four = $om.bar_BarChild;
    }
  }

//method createFooChild override
  foo.FooChild createFooChild(String requiredString) {
//foo.FooChild
    return new $foo_FooChild();
  }
}

// **************************************************************************
// interceptor for [ChildContainer]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Base []
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: ChildContainer 1
// config: Base 2
// TYPE PATH:
//  ChildContainer
//  Base
class $ChildContainer extends ChildContainer implements Pluggable {
  $ChildContainer() {
//Foo
//create
//foo.Foo
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
    this.five = new $foo_Foo();
//Foo
//create
//foo.Foo
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
    this.one = new $foo_Foo();
//Foo
//create
//foo.Foo
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
    this.two = new $foo_Foo();
//FooChild
//create
//foo.FooChild
// c: foo.FooChild
    this.three = new $foo_FooChild();
//BarChild
//create
//bar.BarChild
// c: bar.BarChild
    this.four = new $bar_BarChild();
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
// foo.Foo five
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
// foo.Foo one
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
// foo.Foo two
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
// foo.FooChild three
// c: foo.FooChild
// bar.BarChild four
// c: bar.BarChild
}

// **************************************************************************
// no interceptor for [Object]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// CONFIG
// config: Object 1
// TYPE PATH:
//  Object
// **************************************************************************
// no interceptor for [String]
// type arguments[1]:
// T[99862877] => String[55285317]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: String 55285317
// parent: Pattern []
// CONFIG
// config: String 1
// TYPE PATH:
//  String
// **************************************************************************
// no interceptor for [List<String>]
// type arguments[1]:
// T[265238202] => E[263610483]
// E[268730869] => E[263610483]
// E[263610483] => String[55285317]
// type arguments[2]:
// ENCLOSING: XXX
// String[840604290]
// can be singleton: FALSE
// parameter: E 263610483
// argument: E 263610483
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 265238202
// argument: E 263610483
// parent: Iterable []
// parameter: E 268730869
// argument: E 263610483
// CONFIG
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [T]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [List<T>]
// type arguments[1]:
// T[265238202] => E[263610483]
// E[268730869] => E[263610483]
// E[263610483] => T[473656069]
// type arguments[2]:
// ENCLOSING: NULL
// T[954071581]
// can be singleton: FALSE
// parameter: E 263610483
// argument: E 263610483
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 265238202
// argument: E 263610483
// parent: Iterable []
// parameter: E 268730869
// argument: E 263610483
// CONFIG
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [dynamic]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [ST]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [int]
// type arguments[1]:
// T[99862877] => num[235444537]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: num 235444537
// CONFIG
// config: int 1
// config: num 2
// TYPE PATH:
//  int
//  num
// **************************************************************************
// no interceptor for [double]
// type arguments[1]:
// T[99862877] => num[235444537]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: num 235444537
// CONFIG
// config: double 1
// config: num 2
// TYPE PATH:
//  double
//  num
// **************************************************************************
// no interceptor for [bool]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: bool 1
// TYPE PATH:
//  bool
// **************************************************************************
// no interceptor for [Map<dynamic,dynamic>]
// type arguments[1]:
// K[56096514] => dynamic[1]
// V[255678796] => dynamic[1]
// type arguments[2]:
// ENCLOSING: NULL
// dynamic[185988947]
// ENCLOSING: NULL
// dynamic[185988947]
// can be singleton: FALSE
// parameter: K 56096514
// parameter: V 255678796
// argument: K 56096514
// argument: V 255678796
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: Map 1
// TYPE PATH:
//  Map
// **************************************************************************
// no interceptor for [void]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [SubtypesOf<T>]
// type arguments[1]:
// T[473656069] => T[473656069]
// type arguments[2]:
// ENCLOSING: NULL
// T[954071581]
// can be singleton: FALSE
// parameter: T 473656069
// argument: T 473656069
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [TypePlugin<T>]
// type arguments[1]:
// T[380287154] => T[380287154]
// type arguments[2]:
// ENCLOSING: NULL
// T[954071581]
// can be singleton: FALSE
// parameter: T 380287154
// argument: T 380287154
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// no interceptor for [num]
// type arguments[1]:
// T[99862877] => num[235444537]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: num 235444537
// CONFIG
// config: num 1
// TYPE PATH:
//  num
// **************************************************************************
class $ObjectManager {
  $foo_Foo? _foo_Foo;
  $foo_Foo get foo_Foo {
    if (_foo_Foo == null) {
      _foo_Foo = new $foo_Foo();
    }
    return _foo_Foo as $foo_Foo;
  }

  $foo_FooChild? _foo_FooChild;
  $foo_FooChild get foo_FooChild {
    if (_foo_FooChild == null) {
      _foo_FooChild = new $foo_FooChild();
    }
    return _foo_FooChild as $foo_FooChild;
  }

  $bar_Bar? _bar_Bar;
  $bar_Bar get bar_Bar {
    if (_bar_Bar == null) {
      _bar_Bar = new $bar_Bar();
    }
    return _bar_Bar as $bar_Bar;
  }

  $bar_BarChild? _bar_BarChild;
  $bar_BarChild get bar_BarChild {
    if (_bar_BarChild == null) {
      _bar_BarChild = new $bar_BarChild();
    }
    return _bar_BarChild as $bar_BarChild;
  }

  $Container? _container;
  $Container get container {
    if (_container == null) {
      _container = new $Container();
    }
    return _container as $Container;
  }

  $ChildContainer? _childContainer;
  $ChildContainer get childContainer {
    if (_childContainer == null) {
      _childContainer = new $ChildContainer();
    }
    return _childContainer as $ChildContainer;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 1616ms
