// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'compose.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2023-02-18 08:36:53.419400
// **************************************************************************
// CONFIG
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/.dart_tool/..//lib/swift_composer.di.yaml
// config file for foo: /home/fsw/workspace/swift_shop/packages/swift_composer/test/compose/../lib/foo.di.yaml
// no config file for generics: /home/fsw/workspace/swift_shop/packages/swift_composer/test/compose/../lib/generics.di.yaml
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/test/compose/compose.di.yaml
// **************************************************************************
// MERGED CONFIG
// foo.Foo: {stringField: FooField, integerField: 124}
// foo.FooChild: {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// foo.FooChild2: {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// **************************************************************************
// **************************************************************************
// no interceptor for [SubtypesOf]
// **************************************************************************
// no interceptor for [AnnotatedWith]
// **************************************************************************
// no interceptor for [Pluggable]
// **************************************************************************
// no interceptor for [TypePlugin]
// **************************************************************************
// interceptor for [foo.Foo]
class $foo_Foo extends foo.Foo implements Pluggable {
  $foo_Foo() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String className
  String get className => "foo.Foo";
// String stringField
  String get stringField => "FooField";
// int integerField
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [foo.FooChild]
class $foo_FooChild extends foo.FooChild implements Pluggable {
  $foo_FooChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// double doubleField
  double get doubleField => 0.55;
// bool booleanField
  bool get booleanField => true;
// String className
  String get className => "foo.FooChild";
// String stringField
  String get stringField => "FooChildField";
// int integerField
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [foo.FooChild2]
class $foo_FooChild2 extends foo.FooChild2 implements Pluggable {
  $foo_FooChild2(requiredString) {
//String
    this.requiredString = requiredString;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String requiredString
// String className
  String get className => "foo.FooChild2";
// String stringField
  String get stringField => "FooChild2Field";
// int integerField
  int get integerField => 124;
}

// **************************************************************************
// no interceptor for [generics.SimpleGeneric]
// **************************************************************************
// interceptor for [generics.Param]
class $generics_Param extends generics.Param implements Pluggable {
  $generics_Param() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// interceptor for [generics.SimpleSpecific]
class $generics_SimpleSpecific extends generics.SimpleSpecific
    implements Pluggable {
  $generics_SimpleSpecific() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [generics.ComplexGeneric]
// **************************************************************************
// no interceptor for [generics.SuperComplexGeneric]
// **************************************************************************
// interceptor for [Container]
class $Container extends Container implements Pluggable {
  $Container(fooRequired, genericOfFooRequired, genericOfStringRequired,
      complexGenericRequired) {
//Foo
    this.fooCreated = new $foo_Foo();
//SimpleGeneric<Foo>
    this.genericOfFooCreated = new $generics_SimpleGeneric_foo_Foo_();
//SimpleGeneric<String>
    this.genericOfStringCreated = new $generics_SimpleGeneric_String_();
//ComplexGeneric<Foo, Foo>
    this.complexGenericCreated =
        new $generics_ComplexGeneric_foo_Foo_foo_Foo_();
//Foo
    this.fooRequired = fooRequired;
//SimpleGeneric<Foo>
    this.genericOfFooRequired = genericOfFooRequired;
//SimpleGeneric<String>
    this.genericOfStringRequired = genericOfStringRequired;
//ComplexGeneric<Foo, Foo>
    this.complexGenericRequired = complexGenericRequired;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// foo.Foo fooCreated
// generics.SimpleGeneric<foo.Foo> genericOfFooCreated
// generics.SimpleGeneric<String> genericOfStringCreated
// generics.ComplexGeneric<foo.Foo,foo.Foo> complexGenericCreated
// foo.Foo fooRequired
// generics.SimpleGeneric<foo.Foo> genericOfFooRequired
// generics.SimpleGeneric<String> genericOfStringRequired
// generics.ComplexGeneric<foo.Foo,foo.Foo> complexGenericRequired
// foo.Foo fooInjected
  foo.Foo get fooInjected => $om.foo_Foo;
// generics.SimpleGeneric<foo.Foo> genericOfFooInjected
  generics.SimpleGeneric<foo.Foo> get genericOfFooInjected =>
      $om.generics_SimpleGeneric_foo_Foo_;
// generics.SimpleGeneric<String> genericOfStringInjected
  generics.SimpleGeneric<String> get genericOfStringInjected =>
      $om.generics_SimpleGeneric_String_;
// generics.ComplexGeneric<foo.Foo,foo.Foo> complexGenericInjected
  generics.ComplexGeneric<foo.Foo, foo.Foo> get complexGenericInjected =>
      $om.generics_ComplexGeneric_foo_Foo_foo_Foo_;
}

// **************************************************************************
// no interceptor for [Object]
// **************************************************************************
// no interceptor for [String]
// **************************************************************************
// no interceptor for [List<String>]
// **************************************************************************
// no interceptor for [Map<String,String>]
// **************************************************************************
// no interceptor for [T]
// **************************************************************************
// no interceptor for [dynamic]
// **************************************************************************
// no interceptor for [ST]
// **************************************************************************
// no interceptor for [int]
// **************************************************************************
// no interceptor for [double]
// **************************************************************************
// no interceptor for [bool]
// **************************************************************************
// no interceptor for [void]
// **************************************************************************
// interceptor for [generics.SimpleGeneric<generics.Param>]
//parametrized type
class $generics_SimpleGeneric_generics_Param_
    extends generics.SimpleGeneric<generics.Param> implements Pluggable {
  $generics_SimpleGeneric_generics_Param_() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [A]
// **************************************************************************
// no interceptor for [B]
// **************************************************************************
// no interceptor for [generics.ComplexGeneric<generics.Param,A>]
// **************************************************************************
// interceptor for [generics.SimpleGeneric<foo.Foo>]
//parametrized type
class $generics_SimpleGeneric_foo_Foo_ extends generics.SimpleGeneric<foo.Foo>
    implements Pluggable {
  $generics_SimpleGeneric_foo_Foo_() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// interceptor for [generics.SimpleGeneric<String>]
//parametrized type
class $generics_SimpleGeneric_String_ extends generics.SimpleGeneric<String>
    implements Pluggable {
  $generics_SimpleGeneric_String_() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// interceptor for [generics.ComplexGeneric<foo.Foo,foo.Foo>]
//parametrized type
class $generics_ComplexGeneric_foo_Foo_foo_Foo_
    extends generics.ComplexGeneric<foo.Foo, foo.Foo> implements Pluggable {
  $generics_ComplexGeneric_foo_Foo_foo_Foo_() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// foo.Foo injectedA
  foo.Foo get injectedA => $om.foo_Foo;
// foo.Foo injectedB
  foo.Foo get injectedB => $om.foo_Foo;
}

// **************************************************************************
// **************************************************************************
class $ObjectManager {
  $foo_Foo? _foo_Foo;
  $foo_Foo get foo_Foo {
    if (_foo_Foo == null) {
      _foo_Foo = new $foo_Foo();
    }
    return _foo_Foo as $foo_Foo;
  }

  $foo_FooChild? _foo_FooChild;
  $foo_FooChild get foo_FooChild {
    if (_foo_FooChild == null) {
      _foo_FooChild = new $foo_FooChild();
    }
    return _foo_FooChild as $foo_FooChild;
  }

  $generics_Param? _generics_Param;
  $generics_Param get generics_Param {
    if (_generics_Param == null) {
      _generics_Param = new $generics_Param();
    }
    return _generics_Param as $generics_Param;
  }

  $generics_SimpleSpecific? _generics_SimpleSpecific;
  $generics_SimpleSpecific get generics_SimpleSpecific {
    if (_generics_SimpleSpecific == null) {
      _generics_SimpleSpecific = new $generics_SimpleSpecific();
    }
    return _generics_SimpleSpecific as $generics_SimpleSpecific;
  }

  $generics_SimpleGeneric_generics_Param_?
      _generics_SimpleGeneric_generics_Param_;
  $generics_SimpleGeneric_generics_Param_
      get generics_SimpleGeneric_generics_Param_ {
    if (_generics_SimpleGeneric_generics_Param_ == null) {
      _generics_SimpleGeneric_generics_Param_ =
          new $generics_SimpleGeneric_generics_Param_();
    }
    return _generics_SimpleGeneric_generics_Param_
        as $generics_SimpleGeneric_generics_Param_;
  }

  $generics_SimpleGeneric_foo_Foo_? _generics_SimpleGeneric_foo_Foo_;
  $generics_SimpleGeneric_foo_Foo_ get generics_SimpleGeneric_foo_Foo_ {
    if (_generics_SimpleGeneric_foo_Foo_ == null) {
      _generics_SimpleGeneric_foo_Foo_ = new $generics_SimpleGeneric_foo_Foo_();
    }
    return _generics_SimpleGeneric_foo_Foo_ as $generics_SimpleGeneric_foo_Foo_;
  }

  $generics_SimpleGeneric_String_? _generics_SimpleGeneric_String_;
  $generics_SimpleGeneric_String_ get generics_SimpleGeneric_String_ {
    if (_generics_SimpleGeneric_String_ == null) {
      _generics_SimpleGeneric_String_ = new $generics_SimpleGeneric_String_();
    }
    return _generics_SimpleGeneric_String_ as $generics_SimpleGeneric_String_;
  }

  $generics_ComplexGeneric_foo_Foo_foo_Foo_?
      _generics_ComplexGeneric_foo_Foo_foo_Foo_;
  $generics_ComplexGeneric_foo_Foo_foo_Foo_
      get generics_ComplexGeneric_foo_Foo_foo_Foo_ {
    if (_generics_ComplexGeneric_foo_Foo_foo_Foo_ == null) {
      _generics_ComplexGeneric_foo_Foo_foo_Foo_ =
          new $generics_ComplexGeneric_foo_Foo_foo_Foo_();
    }
    return _generics_ComplexGeneric_foo_Foo_foo_Foo_
        as $generics_ComplexGeneric_foo_Foo_foo_Foo_;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 4ms
