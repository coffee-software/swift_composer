// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'compose.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2022-02-13 19:49:20.487153
// config file for foo: /home/fsw/workspace/swift_composer/test/lib/foo.di.yaml
// **************************************************************************
// ALL TYPES INFO
// **************************************************************************
// SubtypesOf => SubtypesOf  GENERIC [T = T   47246589 = 47246589   47246589 = TypeParameterTypeImpl]
// AnnotatedWith => AnnotatedWith   [      ]
// Pluggable => Pluggable   [      ]
// TypePlugin => TypePlugin  GENERIC [T = T   69357257 = 69357257   69357257 = TypeParameterTypeImpl]
// foo.Foo => foo.Foo INTERCEPTED  [      ]
// foo.FooChild => foo.FooChild INTERCEPTED  [      ]
// foo.FooChild2 => foo.FooChild2 INTERCEPTED  [      ]
// generics.SimpleGeneric => generics.SimpleGeneric  GENERIC [T = T   101133199 = 101133199   101133199 = TypeParameterTypeImpl]
// generics.Param => generics.Param INTERCEPTED  [      ]
// generics.SimpleSpecific => generics.SimpleSpecific INTERCEPTED  [T = Param   101133199 = 98027057   101133199 = InterfaceTypeImpl]
// generics.ComplexGeneric => generics.ComplexGeneric  GENERIC [A = A,B = B   271105151 = 271105151,429580744 = 429580744   271105151 = TypeParameterTypeImpl,429580744 = TypeParameterTypeImpl]
// generics.SuperComplexGeneric => generics.SuperComplexGeneric  GENERIC [A = A,B = B   492680764 = 492680764,352514619 = 352514619   492680764 = TypeParameterTypeImpl,352514619 = TypeParameterTypeImpl]
// Container => Container INTERCEPTED  [      ]
// Object => Object   [      ]
// String => String   [T = String   459756122 = 153217077   459756122 = InterfaceTypeImpl]
// List<String> => List<String>   [T = E,E = String   194905962 = 40007411,40007411 = 153217077   194905962 = TypeParameterTypeImpl,40007411 = InterfaceTypeImpl]
// T => T   [      ]
// List<T> => List<T>   [T = E,E = T   194905962 = 40007411,40007411 = 47246589   194905962 = TypeParameterTypeImpl,40007411 = TypeParameterTypeImpl]
// dynamic => dynamic   [      ]
// ST => ST   [      ]
// int => int   [T = num   459756122 = 148975391   459756122 = InterfaceTypeImpl]
// double => double   [T = num   459756122 = 148975391   459756122 = InterfaceTypeImpl]
// bool => bool   [      ]
// void => void   [      ]
// generics.SimpleGeneric<generics.Param> => generics.SimpleGeneric<generics.Param> INTERCEPTED  [T = Param   101133199 = 98027057   101133199 = InterfaceTypeImpl]
// A => A   [      ]
// B => B   [      ]
// generics.ComplexGeneric<generics.Param,A> => generics.ComplexGeneric<generics.Param,A>   [A = Param,B = A   271105151 = 98027057,429580744 = 492680764   271105151 = InterfaceTypeImpl,429580744 = TypeParameterTypeImpl]
// generics.SimpleGeneric<foo.Foo> => generics.SimpleGeneric<foo.Foo> INTERCEPTED  [T = Foo   101133199 = 160765256   101133199 = InterfaceTypeImpl]
// generics.SimpleGeneric<String> => generics.SimpleGeneric<String> INTERCEPTED  [T = String   101133199 = 153217077   101133199 = InterfaceTypeImpl]
// generics.ComplexGeneric<foo.Foo,foo.Foo> => generics.ComplexGeneric<foo.Foo,foo.Foo> INTERCEPTED  [A = Foo,B = Foo   271105151 = 160765256,429580744 = 160765256   271105151 = InterfaceTypeImpl,429580744 = InterfaceTypeImpl]
// **************************************************************************
// no interceptor for [SubtypesOf]
// type arguments[1]:
// T[47246589] => T[47246589]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 47246589
// argument: T 47246589
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [AnnotatedWith]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: AnnotatedWith 1
// TYPE PATH:
//  AnnotatedWith
// **************************************************************************
// no interceptor for [Pluggable]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Pluggable 1
// TYPE PATH:
//  Pluggable
// **************************************************************************
// no interceptor for [TypePlugin]
// type arguments[1]:
// T[69357257] => T[69357257]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 69357257
// argument: T 69357257
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// interceptor for [foo.Foo]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: foo.Foo 1
// config: stringField FooField
// config: integerField 124
// TYPE PATH:
//  foo.Foo
class $foo_Foo extends foo.Foo implements Pluggable {
  $foo_Foo() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String className
// c: String
  String get className => "foo.Foo";
// String stringField
// c: String
  String get stringField => "FooField";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [foo.FooChild]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: foo.FooChild 1
// config: stringField FooChildField
// config: doubleField 0.55
// config: booleanField true
// config: foo.Foo 2
// config: integerField 124
// TYPE PATH:
//  foo.FooChild
//  foo.Foo
class $foo_FooChild extends foo.FooChild implements Pluggable {
  $foo_FooChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// double doubleField
// c: double
  double get doubleField => 0.55;
// bool booleanField
// c: bool
  bool get booleanField => true;
// String className
// c: String
  String get className => "foo.FooChild";
// String stringField
// c: String
  String get stringField => "FooChildField";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [foo.FooChild2]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 1
// config: stringField FooChild2Field
// config: doubleField 0.55
// config: booleanField true
// config: foo.Foo 2
// config: integerField 124
// TYPE PATH:
//  foo.FooChild2
//  foo.Foo
class $foo_FooChild2 extends foo.FooChild2 implements Pluggable {
  $foo_FooChild2(requiredString) {
//String
    this.requiredString = requiredString;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String requiredString
// c: String
// String className
// c: String
  String get className => "foo.FooChild2";
// String stringField
// c: String
  String get stringField => "FooChild2Field";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// no interceptor for [generics.SimpleGeneric]
// type arguments[1]:
// T[101133199] => T[101133199]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
// **************************************************************************
// interceptor for [generics.Param]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.Param 1
// TYPE PATH:
//  generics.Param
class $generics_Param extends generics.Param implements Pluggable {
  $generics_Param() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// interceptor for [generics.SimpleSpecific]
// type arguments[1]:
// T[101133199] => Param[98027057]
// type arguments[2]:
// can be singleton: TRUE
// parent: SimpleGeneric [@bool get Compose]
// parameter: T 101133199
// argument: Param 98027057
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.SimpleSpecific 1
// config: generics.SimpleGeneric 2
// TYPE PATH:
//  generics.SimpleSpecific
//  generics.SimpleGeneric
class $generics_SimpleSpecific extends generics.SimpleSpecific
    implements Pluggable {
  $generics_SimpleSpecific() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [generics.ComplexGeneric]
// type arguments[1]:
// A[271105151] => A[271105151]
// B[429580744] => B[429580744]
// type arguments[2]:
// can be singleton: FALSE
// parameter: A 271105151
// parameter: B 429580744
// argument: A 271105151
// argument: B 429580744
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.ComplexGeneric 1
// TYPE PATH:
//  generics.ComplexGeneric
// **************************************************************************
// no interceptor for [generics.SuperComplexGeneric]
// type arguments[1]:
// A[271105151] => Param[98027057]
// B[429580744] => A[492680764]
// A[492680764] => A[492680764]
// B[352514619] => B[352514619]
// type arguments[2]:
// can be singleton: FALSE
// parameter: A 492680764
// parameter: B 352514619
// argument: A 492680764
// argument: B 352514619
// parent: ComplexGeneric [@bool get Compose]
// parameter: A 271105151
// parameter: B 429580744
// argument: Param 98027057
// argument: A 492680764
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.SuperComplexGeneric 1
// config: generics.ComplexGeneric 2
// TYPE PATH:
//  generics.SuperComplexGeneric
//  generics.ComplexGeneric
// **************************************************************************
// interceptor for [Container]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Container 1
// TYPE PATH:
//  Container
class $Container extends Container implements Pluggable {
  $Container(fooRequired, genericOfFooRequired, genericOfStringRequired,
      complexGenericRequired) {
//Foo
//create
//foo.Foo
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
    this.fooCreated = new $foo_Foo();
//SimpleGeneric<Foo>
//create
//generics.SimpleGeneric<foo.Foo>
// c: generics.SimpleGeneric<foo.Foo>
    this.genericOfFooCreated = new $generics_SimpleGeneric_foo_Foo_();
//SimpleGeneric<String>
//create
//generics.SimpleGeneric<String>
// c: generics.SimpleGeneric<String>
    this.genericOfStringCreated = new $generics_SimpleGeneric_String_();
//ComplexGeneric<Foo, Foo>
//create
//generics.ComplexGeneric<foo.Foo,foo.Foo>
// c: generics.ComplexGeneric<foo.Foo,foo.Foo>
    this.complexGenericCreated =
        new $generics_ComplexGeneric_foo_Foo_foo_Foo_();
//Foo
    this.fooRequired = fooRequired;
//SimpleGeneric<Foo>
    this.genericOfFooRequired = genericOfFooRequired;
//SimpleGeneric<String>
    this.genericOfStringRequired = genericOfStringRequired;
//ComplexGeneric<Foo, Foo>
    this.complexGenericRequired = complexGenericRequired;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// foo.Foo fooCreated
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
// generics.SimpleGeneric<foo.Foo> genericOfFooCreated
// c: generics.SimpleGeneric<foo.Foo>
// generics.SimpleGeneric<String> genericOfStringCreated
// c: generics.SimpleGeneric<String>
// generics.ComplexGeneric<foo.Foo,foo.Foo> complexGenericCreated
// c: generics.ComplexGeneric<foo.Foo,foo.Foo>
// foo.Foo fooRequired
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
// generics.SimpleGeneric<foo.Foo> genericOfFooRequired
// c: generics.SimpleGeneric<foo.Foo>
// generics.SimpleGeneric<String> genericOfStringRequired
// c: generics.SimpleGeneric<String>
// generics.ComplexGeneric<foo.Foo,foo.Foo> complexGenericRequired
// c: generics.ComplexGeneric<foo.Foo,foo.Foo>
// foo.Foo fooInjected
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
  foo.Foo get fooInjected => $om.foo_Foo;
// generics.SimpleGeneric<foo.Foo> genericOfFooInjected
// c: generics.SimpleGeneric<foo.Foo>
  generics.SimpleGeneric<foo.Foo> get genericOfFooInjected =>
      $om.generics_SimpleGeneric_foo_Foo_;
// generics.SimpleGeneric<String> genericOfStringInjected
// c: generics.SimpleGeneric<String>
  generics.SimpleGeneric<String> get genericOfStringInjected =>
      $om.generics_SimpleGeneric_String_;
// generics.ComplexGeneric<foo.Foo,foo.Foo> complexGenericInjected
// c: generics.ComplexGeneric<foo.Foo,foo.Foo>
  generics.ComplexGeneric<foo.Foo, foo.Foo> get complexGenericInjected =>
      $om.generics_ComplexGeneric_foo_Foo_foo_Foo_;
}

// **************************************************************************
// no interceptor for [Object]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Object 1
// TYPE PATH:
//  Object
// **************************************************************************
// no interceptor for [String]
// type arguments[1]:
// T[459756122] => String[153217077]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: String 153217077
// parent: Pattern []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: String 1
// TYPE PATH:
//  String
// **************************************************************************
// no interceptor for [List<String>]
// type arguments[1]:
// T[194905962] => E[40007411]
// E[37912016] => E[40007411]
// E[40007411] => String[153217077]
// type arguments[2]:
// ENCLOSING: XXX
// String[1029306501]
// can be singleton: FALSE
// parameter: E 40007411
// argument: E 40007411
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 194905962
// argument: E 40007411
// parent: Iterable []
// parameter: E 37912016
// argument: E 40007411
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [T]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [List<T>]
// type arguments[1]:
// T[194905962] => E[40007411]
// E[37912016] => E[40007411]
// E[40007411] => T[47246589]
// type arguments[2]:
// ENCLOSING: NULL
// T[486529364]
// can be singleton: FALSE
// parameter: E 40007411
// argument: E 40007411
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 194905962
// argument: E 40007411
// parent: Iterable []
// parameter: E 37912016
// argument: E 40007411
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [dynamic]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [ST]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [int]
// type arguments[1]:
// T[459756122] => num[148975391]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: num 148975391
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: int 1
// config: num 2
// TYPE PATH:
//  int
//  num
// **************************************************************************
// no interceptor for [double]
// type arguments[1]:
// T[459756122] => num[148975391]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: num 148975391
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: double 1
// config: num 2
// TYPE PATH:
//  double
//  num
// **************************************************************************
// no interceptor for [bool]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bool 1
// TYPE PATH:
//  bool
// **************************************************************************
// no interceptor for [void]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// interceptor for [generics.SimpleGeneric<generics.Param>]
// type arguments[1]:
// T[101133199] => Param[98027057]
// type arguments[2]:
// ENCLOSING: XXX
// Param[570398]
// can be singleton: TRUE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
//parametrized type
class $generics_SimpleGeneric_generics_Param_
    extends generics.SimpleGeneric<generics.Param> implements Pluggable {
  $generics_SimpleGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [A]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [B]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [generics.ComplexGeneric<generics.Param,A>]
// type arguments[1]:
// A[271105151] => Param[98027057]
// B[429580744] => A[492680764]
// type arguments[2]:
// ENCLOSING: XXX
// Param[570398]
// ENCLOSING: NULL
// A[361734256]
// can be singleton: FALSE
// parameter: A 271105151
// parameter: B 429580744
// argument: A 271105151
// argument: B 429580744
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.ComplexGeneric 1
// TYPE PATH:
//  generics.ComplexGeneric
// **************************************************************************
// interceptor for [generics.SimpleGeneric<foo.Foo>]
// type arguments[1]:
// T[101133199] => Foo[160765256]
// type arguments[2]:
// ENCLOSING: XXX
// Foo[430169740]
// can be singleton: TRUE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
//parametrized type
class $generics_SimpleGeneric_foo_Foo_ extends generics.SimpleGeneric<foo.Foo>
    implements Pluggable {
  $generics_SimpleGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// interceptor for [generics.SimpleGeneric<String>]
// type arguments[1]:
// T[101133199] => String[153217077]
// type arguments[2]:
// ENCLOSING: XXX
// String[1029306501]
// can be singleton: TRUE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
//parametrized type
class $generics_SimpleGeneric_String_ extends generics.SimpleGeneric<String>
    implements Pluggable {
  $generics_SimpleGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// interceptor for [generics.ComplexGeneric<foo.Foo,foo.Foo>]
// type arguments[1]:
// A[271105151] => Foo[160765256]
// B[429580744] => Foo[160765256]
// type arguments[2]:
// ENCLOSING: XXX
// Foo[430169740]
// ENCLOSING: XXX
// Foo[430169740]
// can be singleton: TRUE
// parameter: A 271105151
// parameter: B 429580744
// argument: A 271105151
// argument: B 429580744
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.ComplexGeneric 1
// TYPE PATH:
//  generics.ComplexGeneric
//parametrized type
class $generics_ComplexGeneric_foo_Foo_foo_Foo_
    extends generics.ComplexGeneric<foo.Foo, foo.Foo> implements Pluggable {
  $generics_ComplexGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// foo.Foo injectedA
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
  foo.Foo get injectedA => $om.foo_Foo;
// foo.Foo injectedB
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
  foo.Foo get injectedB => $om.foo_Foo;
}

// **************************************************************************
// no interceptor for [SubtypesOf<T>]
// type arguments[1]:
// T[47246589] => T[47246589]
// type arguments[2]:
// ENCLOSING: NULL
// T[486529364]
// can be singleton: FALSE
// parameter: T 47246589
// argument: T 47246589
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [TypePlugin<T>]
// type arguments[1]:
// T[69357257] => T[69357257]
// type arguments[2]:
// ENCLOSING: NULL
// T[486529364]
// can be singleton: FALSE
// parameter: T 69357257
// argument: T 69357257
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// no interceptor for [generics.SimpleGeneric<T>]
// type arguments[1]:
// T[101133199] => T[101133199]
// type arguments[2]:
// ENCLOSING: NULL
// T[486529364]
// can be singleton: FALSE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
// **************************************************************************
// no interceptor for [generics.ComplexGeneric<A,B>]
// type arguments[1]:
// A[271105151] => A[271105151]
// B[429580744] => B[429580744]
// type arguments[2]:
// ENCLOSING: NULL
// A[361734256]
// ENCLOSING: NULL
// B[966659097]
// can be singleton: FALSE
// parameter: A 271105151
// parameter: B 429580744
// argument: A 271105151
// argument: B 429580744
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.ComplexGeneric 1
// TYPE PATH:
//  generics.ComplexGeneric
// **************************************************************************
// no interceptor for [generics.SuperComplexGeneric<A,B>]
// type arguments[1]:
// A[271105151] => Param[98027057]
// B[429580744] => A[492680764]
// A[492680764] => A[492680764]
// B[352514619] => B[352514619]
// type arguments[2]:
// ENCLOSING: NULL
// A[361734256]
// ENCLOSING: NULL
// B[966659097]
// can be singleton: FALSE
// parameter: A 492680764
// parameter: B 352514619
// argument: A 492680764
// argument: B 352514619
// parent: ComplexGeneric [@bool get Compose]
// parameter: A 271105151
// parameter: B 429580744
// argument: Param 98027057
// argument: A 492680764
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: generics.SuperComplexGeneric 1
// config: generics.ComplexGeneric 2
// TYPE PATH:
//  generics.SuperComplexGeneric
//  generics.ComplexGeneric
// **************************************************************************
// no interceptor for [num]
// type arguments[1]:
// T[459756122] => num[148975391]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: num 148975391
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: num 1
// TYPE PATH:
//  num
// **************************************************************************
class $ObjectManager {
  $foo_Foo? _foo_Foo;
  $foo_Foo get foo_Foo {
    if (_foo_Foo == null) {
      _foo_Foo = new $foo_Foo();
    }
    return _foo_Foo as $foo_Foo;
  }

  $foo_FooChild? _foo_FooChild;
  $foo_FooChild get foo_FooChild {
    if (_foo_FooChild == null) {
      _foo_FooChild = new $foo_FooChild();
    }
    return _foo_FooChild as $foo_FooChild;
  }

  $generics_Param? _generics_Param;
  $generics_Param get generics_Param {
    if (_generics_Param == null) {
      _generics_Param = new $generics_Param();
    }
    return _generics_Param as $generics_Param;
  }

  $generics_SimpleSpecific? _generics_SimpleSpecific;
  $generics_SimpleSpecific get generics_SimpleSpecific {
    if (_generics_SimpleSpecific == null) {
      _generics_SimpleSpecific = new $generics_SimpleSpecific();
    }
    return _generics_SimpleSpecific as $generics_SimpleSpecific;
  }

  $generics_SimpleGeneric_generics_Param_?
      _generics_SimpleGeneric_generics_Param_;
  $generics_SimpleGeneric_generics_Param_
      get generics_SimpleGeneric_generics_Param_ {
    if (_generics_SimpleGeneric_generics_Param_ == null) {
      _generics_SimpleGeneric_generics_Param_ =
          new $generics_SimpleGeneric_generics_Param_();
    }
    return _generics_SimpleGeneric_generics_Param_
        as $generics_SimpleGeneric_generics_Param_;
  }

  $generics_SimpleGeneric_foo_Foo_? _generics_SimpleGeneric_foo_Foo_;
  $generics_SimpleGeneric_foo_Foo_ get generics_SimpleGeneric_foo_Foo_ {
    if (_generics_SimpleGeneric_foo_Foo_ == null) {
      _generics_SimpleGeneric_foo_Foo_ = new $generics_SimpleGeneric_foo_Foo_();
    }
    return _generics_SimpleGeneric_foo_Foo_ as $generics_SimpleGeneric_foo_Foo_;
  }

  $generics_SimpleGeneric_String_? _generics_SimpleGeneric_String_;
  $generics_SimpleGeneric_String_ get generics_SimpleGeneric_String_ {
    if (_generics_SimpleGeneric_String_ == null) {
      _generics_SimpleGeneric_String_ = new $generics_SimpleGeneric_String_();
    }
    return _generics_SimpleGeneric_String_ as $generics_SimpleGeneric_String_;
  }

  $generics_ComplexGeneric_foo_Foo_foo_Foo_?
      _generics_ComplexGeneric_foo_Foo_foo_Foo_;
  $generics_ComplexGeneric_foo_Foo_foo_Foo_
      get generics_ComplexGeneric_foo_Foo_foo_Foo_ {
    if (_generics_ComplexGeneric_foo_Foo_foo_Foo_ == null) {
      _generics_ComplexGeneric_foo_Foo_foo_Foo_ =
          new $generics_ComplexGeneric_foo_Foo_foo_Foo_();
    }
    return _generics_ComplexGeneric_foo_Foo_foo_Foo_
        as $generics_ComplexGeneric_foo_Foo_foo_Foo_;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 9ms
