// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'plugins.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2021-08-21 15:23:07.347599
//loading config file /home/fsw/workspace/swift_composer/test/lib/module1.di.yaml
// **************************************************************************
// import package:swift_composer/swift_composer.dart
// import asset:swift_composer/test/lib/module1.dart as module_test1
// **************************************************************************
//no interceptor for [AnnotatedWith]
// **************************************************************************
//no interceptor for [Pluggable]
// **************************************************************************
//no interceptor for [TypePlugin]
// **************************************************************************
//interceptor for [module_test1.Foo]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//plugin: SimplePlugin
//plugin: MoreComplexPlugin
//CONFIG
//config: module_test1.Foo {stringField: FooField, integerField: 124}
//config: module_test1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: module_test1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: module_test1.Bar {stringField: BarField}
//config: module_test1.BarChild {stringField: BarChildField}
//config: module_test1.Foo 1
//config: stringField FooField
//config: integerField 124
//TYPE PATH:
//   module_test1.Foo
class $module_test1_Foo extends module_test1.Foo implements Pluggable {
  late SimplePlugin simplePlugin;
  late MoreComplexPlugin moreComplexPlugin;
  $module_test1_Foo() {
    simplePlugin = new $SimplePlugin(this);
    moreComplexPlugin = new $MoreComplexPlugin(this);
  }
  T plugin<T>() {
    if (T == SimplePlugin) {
      return simplePlugin as T;
    }
    if (T == MoreComplexPlugin) {
      return moreComplexPlugin as T;
    }
    throw new Exception('no plugin for this type');
  }

  String get className => "module_test1.Foo";
  String get stringField => "FooField";
  int get integerField => 124;
}

// **************************************************************************
//interceptor for [module_test1.FooChild]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Foo [@bool get Compose]
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//CONFIG
//config: module_test1.Foo {stringField: FooField, integerField: 124}
//config: module_test1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: module_test1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: module_test1.Bar {stringField: BarField}
//config: module_test1.BarChild {stringField: BarChildField}
//config: module_test1.FooChild 1
//config: stringField FooChildField
//config: doubleField 0.55
//config: booleanField true
//config: module_test1.Foo 2
//config: integerField 124
//TYPE PATH:
//   module_test1.FooChild
//   module_test1.Foo
class $module_test1_FooChild extends module_test1.FooChild
    implements Pluggable {
  $module_test1_FooChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  double get doubleField => 0.55;
  bool get booleanField => true;
  String get className => "module_test1.FooChild";
  String get stringField => "FooChildField";
  int get integerField => 124;
}

// **************************************************************************
//interceptor for [module_test1.FooChild2]
//type arguments[1]:
//type arguments[2]:
//can be singleton: FALSE
//parent: Foo [@bool get Compose]
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//CONFIG
//config: module_test1.Foo {stringField: FooField, integerField: 124}
//config: module_test1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: module_test1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: module_test1.Bar {stringField: BarField}
//config: module_test1.BarChild {stringField: BarChildField}
//config: module_test1.FooChild2 1
//config: stringField FooChild2Field
//config: doubleField 0.55
//config: booleanField true
//config: module_test1.Foo 2
//config: integerField 124
//TYPE PATH:
//   module_test1.FooChild2
//   module_test1.Foo
class $module_test1_FooChild2 extends module_test1.FooChild2
    implements Pluggable {
  $module_test1_FooChild2(requiredString) {
//String
    this.requiredString = requiredString;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  String get className => "module_test1.FooChild2";
  String get stringField => "FooChild2Field";
  int get integerField => 124;
}

// **************************************************************************
//interceptor for [module_test1.Bar]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: module_test1.Foo {stringField: FooField, integerField: 124}
//config: module_test1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: module_test1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: module_test1.Bar {stringField: BarField}
//config: module_test1.BarChild {stringField: BarChildField}
//config: module_test1.Bar 1
//config: stringField BarField
//TYPE PATH:
//   module_test1.Bar
class $module_test1_Bar extends module_test1.Bar implements Pluggable {
  $module_test1_Bar() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  String get stringField => "BarField";
  List<String> get classNames => [];
}

// **************************************************************************
//interceptor for [module_test1.BarChild]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Bar [@bool get Compose]
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: module_test1.Foo {stringField: FooField, integerField: 124}
//config: module_test1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: module_test1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: module_test1.Bar {stringField: BarField}
//config: module_test1.BarChild {stringField: BarChildField}
//config: module_test1.BarChild 1
//config: stringField BarChildField
//config: module_test1.Bar 2
//TYPE PATH:
//   module_test1.BarChild
//   module_test1.Bar
class $module_test1_BarChild extends module_test1.BarChild
    implements Pluggable {
  $module_test1_BarChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  String get stringField => "BarChildField";
  List<String> get classNames => ['module_test1.BarChild'];
}

// **************************************************************************
//interceptor for [module_test1.SimpleGeneric]
//type arguments[1]:
//T[99166349] => T[99166349]
//type arguments[2]:
//can be singleton: TRUE
//parameter: T 99166349
//argument: T 99166349
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//CONFIG
//config: module_test1.Foo {stringField: FooField, integerField: 124}
//config: module_test1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: module_test1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: module_test1.Bar {stringField: BarField}
//config: module_test1.BarChild {stringField: BarChildField}
//NO ELEMENT!
//config: module_test1.SimpleGeneric<module_test1.T> 1
//TYPE PATH:
//NO ELEMENT!
//   module_test1.SimpleGeneric<module_test1.T>
class $module_test1_SimpleGeneric<T> extends module_test1.SimpleGeneric<T>
    implements Pluggable {
  $module_test1_SimpleGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
//NO ELEMENT!
}

// **************************************************************************
//interceptor for [SimplePlugin]
//type arguments[1]:
//T[362979300] => Foo[319114392]
//type arguments[2]:
//can be singleton: FALSE
//parent: TypePlugin [@bool get ComposeSubtypes]
//parameter: T 362979300
//argument: Foo 319114392
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: module_test1.Foo {stringField: FooField, integerField: 124}
//config: module_test1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: module_test1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: module_test1.Bar {stringField: BarField}
//config: module_test1.BarChild {stringField: BarChildField}
//config: SimplePlugin 1
//config: TypePlugin<module_test1.Foo> 2
//TYPE PATH:
//   SimplePlugin
//   TypePlugin<module_test1.Foo>
class $SimplePlugin extends SimplePlugin implements Pluggable {
  $SimplePlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
//NO ELEMENT!
//NO ELEMENT!
}

// **************************************************************************
//interceptor for [MoreComplexPlugin]
//type arguments[1]:
//T[362979300] => Foo[319114392]
//type arguments[2]:
//can be singleton: FALSE
//parent: TypePlugin [@bool get ComposeSubtypes]
//parameter: T 362979300
//argument: Foo 319114392
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: module_test1.Foo {stringField: FooField, integerField: 124}
//config: module_test1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: module_test1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: module_test1.Bar {stringField: BarField}
//config: module_test1.BarChild {stringField: BarChildField}
//config: MoreComplexPlugin 1
//config: TypePlugin<module_test1.Foo> 2
//TYPE PATH:
//   MoreComplexPlugin
//   TypePlugin<module_test1.Foo>
class $MoreComplexPlugin extends MoreComplexPlugin implements Pluggable {
  $MoreComplexPlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

//candidate: AnnotatedWith
//element ok
//name not fit
//interceptor ok
//candidate: Pluggable
//element ok
//name not fit
//candidate: TypePlugin
//element ok
//name not fit
//candidate: module_test1.Foo
//element ok
//name not fit
//interceptor ok
//candidate: module_test1.FooChild
//element ok
//name not fit
//interceptor ok
//candidate: module_test1.FooChild2
//element ok
//name not fit
//interceptor ok
//candidate: module_test1.Bar
//element ok
//candidate: module_test1.BarChild
//element ok
//name not fit
//interceptor ok
//candidate: module_test1.SimpleGeneric
//element ok
//name not fit
//interceptor ok
//candidate: SimplePlugin
//element ok
//name not fit
//interceptor ok
//candidate: MoreComplexPlugin
//element ok
//name not fit
//interceptor ok
//candidate: PluginOnGeneric
//element ok
//name not fit
//interceptor ok
//candidate: String
//element ok
//name not fit
//candidate: int
//element ok
//name not fit
//candidate: double
//element ok
//name not fit
//candidate: bool
//element ok
//name not fit
//interceptor ok
//candidate: List<String>
//element ok
//name not fit
//candidate: module_test1.T
//candidate: module_test1.SimpleGeneric<module_test1.T>
//element ok
//name not fit
//candidate: void
//candidate: TypePlugin<module_test1.Foo>
//element ok
//name not fit
//candidate: ST
  module_test1.Bar get bar => $om.module_test1_Bar;
//NO ELEMENT!
}

// **************************************************************************
//interceptor for [PluginOnGeneric]
//type arguments[1]:
//T[362979300] => SimpleGeneric<dynamic>[140693248]
//type arguments[2]:
//can be singleton: FALSE
//parent: TypePlugin [@bool get ComposeSubtypes]
//parameter: T 362979300
//argument: SimpleGeneric 140693248
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: module_test1.Foo {stringField: FooField, integerField: 124}
//config: module_test1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: module_test1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: module_test1.Bar {stringField: BarField}
//config: module_test1.BarChild {stringField: BarChildField}
//config: PluginOnGeneric 1
//config: TypePlugin<module_test1.SimpleGeneric> 2
//TYPE PATH:
//   PluginOnGeneric
//   TypePlugin<module_test1.SimpleGeneric>
class $PluginOnGeneric extends PluginOnGeneric implements Pluggable {
  $PluginOnGeneric(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

//candidate: AnnotatedWith
//element ok
//name not fit
//interceptor ok
//candidate: Pluggable
//element ok
//name not fit
//candidate: TypePlugin
//element ok
//name not fit
//candidate: module_test1.Foo
//element ok
//name not fit
//interceptor ok
//candidate: module_test1.FooChild
//element ok
//name not fit
//interceptor ok
//candidate: module_test1.FooChild2
//element ok
//name not fit
//interceptor ok
//candidate: module_test1.Bar
//element ok
//candidate: module_test1.BarChild
//element ok
//name not fit
//interceptor ok
//candidate: module_test1.SimpleGeneric
//element ok
//name not fit
//interceptor ok
//candidate: SimplePlugin
//element ok
//name not fit
//interceptor ok
//candidate: MoreComplexPlugin
//element ok
//name not fit
//interceptor ok
//candidate: PluginOnGeneric
//element ok
//name not fit
//interceptor ok
//candidate: String
//element ok
//name not fit
//candidate: int
//element ok
//name not fit
//candidate: double
//element ok
//name not fit
//candidate: bool
//element ok
//name not fit
//interceptor ok
//candidate: List<String>
//element ok
//name not fit
//candidate: module_test1.T
//candidate: module_test1.SimpleGeneric<module_test1.T>
//element ok
//name not fit
//candidate: void
//candidate: TypePlugin<module_test1.Foo>
//element ok
//name not fit
//candidate: ST
//candidate: TypePlugin<module_test1.SimpleGeneric>
//element ok
//name not fit
  module_test1.Bar get bar => $om.module_test1_Bar;
//NO ELEMENT!
}

// **************************************************************************
//no interceptor for [String]
// **************************************************************************
//no interceptor for [int]
// **************************************************************************
//no interceptor for [double]
// **************************************************************************
//no interceptor for [bool]
// **************************************************************************
//no interceptor for [List<String>]
// **************************************************************************
//no interceptor for [module_test1.T]
// **************************************************************************
//no interceptor for [module_test1.SimpleGeneric<module_test1.T>]
// **************************************************************************
//no interceptor for [void]
// **************************************************************************
//no interceptor for [TypePlugin<module_test1.Foo>]
// **************************************************************************
//no interceptor for [ST]
// **************************************************************************
//no interceptor for [TypePlugin<module_test1.SimpleGeneric>]
// **************************************************************************
// All Types:
//AnnotatedWith AnnotatedWith
//Pluggable Pluggable
//TypePlugin TypePlugin
//module_test1.Foo module_test1.Foo
//module_test1.FooChild module_test1.FooChild
//module_test1.FooChild2 module_test1.FooChild2
//module_test1.Bar module_test1.Bar
//module_test1.BarChild module_test1.BarChild
//module_test1.SimpleGeneric module_test1.SimpleGeneric
//SimplePlugin SimplePlugin
//MoreComplexPlugin MoreComplexPlugin
//PluginOnGeneric PluginOnGeneric
//String String
//int int
//double double
//bool bool
//List<String> List<String>
//module_test1.T module_test1.T
//module_test1.SimpleGeneric<module_test1.T> module_test1.SimpleGeneric<module_test1.T>
//void void
//TypePlugin<module_test1.Foo> TypePlugin<module_test1.Foo>
//ST ST
//TypePlugin<module_test1.SimpleGeneric> TypePlugin<module_test1.SimpleGeneric>
// **************************************************************************
class $ObjectManager {
  $module_test1_Foo? _module_test1_Foo;
  $module_test1_Foo get module_test1_Foo {
    if (_module_test1_Foo == null) {
      _module_test1_Foo = new $module_test1_Foo();
    }
    return _module_test1_Foo as $module_test1_Foo;
  }

  $module_test1_FooChild? _module_test1_FooChild;
  $module_test1_FooChild get module_test1_FooChild {
    if (_module_test1_FooChild == null) {
      _module_test1_FooChild = new $module_test1_FooChild();
    }
    return _module_test1_FooChild as $module_test1_FooChild;
  }

  $module_test1_Bar? _module_test1_Bar;
  $module_test1_Bar get module_test1_Bar {
    if (_module_test1_Bar == null) {
      _module_test1_Bar = new $module_test1_Bar();
    }
    return _module_test1_Bar as $module_test1_Bar;
  }

  $module_test1_BarChild? _module_test1_BarChild;
  $module_test1_BarChild get module_test1_BarChild {
    if (_module_test1_BarChild == null) {
      _module_test1_BarChild = new $module_test1_BarChild();
    }
    return _module_test1_BarChild as $module_test1_BarChild;
  }

  $module_test1_SimpleGeneric? _module_test1_SimpleGeneric;
  $module_test1_SimpleGeneric get module_test1_SimpleGeneric {
    if (_module_test1_SimpleGeneric == null) {
      _module_test1_SimpleGeneric = new $module_test1_SimpleGeneric();
    }
    return _module_test1_SimpleGeneric as $module_test1_SimpleGeneric;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 4ms
