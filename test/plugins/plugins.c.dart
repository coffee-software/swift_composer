// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'plugins.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2022-02-13 19:49:20.527915
// config file for foo: /home/fsw/workspace/swift_composer/test/lib/foo.di.yaml
// config file for bar: /home/fsw/workspace/swift_composer/test/lib/bar.di.yaml
// **************************************************************************
// ALL TYPES INFO
// **************************************************************************
// SubtypesOf => SubtypesOf  GENERIC [T = T   47246589 = 47246589   47246589 = TypeParameterTypeImpl]
// AnnotatedWith => AnnotatedWith   [      ]
// Pluggable => Pluggable   [      ]
// TypePlugin => TypePlugin  GENERIC [T = T   69357257 = 69357257   69357257 = TypeParameterTypeImpl]
// foo.Foo => foo.Foo INTERCEPTED  [      ]
// foo.FooChild => foo.FooChild INTERCEPTED  [      ]
// foo.FooChild2 => foo.FooChild2 INTERCEPTED  [      ]
// bar.Bar => bar.Bar INTERCEPTED  [      ]
// bar.BarChild => bar.BarChild INTERCEPTED  [      ]
// generics.SimpleGeneric => generics.SimpleGeneric  GENERIC [T = T   101133199 = 101133199   101133199 = TypeParameterTypeImpl]
// generics.Param => generics.Param INTERCEPTED  [      ]
// generics.SimpleSpecific => generics.SimpleSpecific INTERCEPTED  [T = Param   101133199 = 98027057   101133199 = InterfaceTypeImpl]
// generics.ComplexGeneric => generics.ComplexGeneric  GENERIC [A = A,B = B   271105151 = 271105151,429580744 = 429580744   271105151 = TypeParameterTypeImpl,429580744 = TypeParameterTypeImpl]
// generics.SuperComplexGeneric => generics.SuperComplexGeneric  GENERIC [A = A,B = B   492680764 = 492680764,352514619 = 352514619   492680764 = TypeParameterTypeImpl,352514619 = TypeParameterTypeImpl]
// SimplePlugin => SimplePlugin INTERCEPTED  [T = Foo   69357257 = 160765256   69357257 = InterfaceTypeImpl]
// MoreComplexPlugin => MoreComplexPlugin INTERCEPTED  [T = Foo   69357257 = 160765256   69357257 = InterfaceTypeImpl]
// PluginOnGeneric => PluginOnGeneric INTERCEPTED  [T = SimpleGeneric<dynamic>   69357257 = 250720148   69357257 = InterfaceTypeImpl]
// AbstractGeneric => AbstractGeneric  GENERIC [T = T   208617990 = 208617990   208617990 = TypeParameterTypeImpl]
// GenericTypedWithFoo => GenericTypedWithFoo INTERCEPTED  [T = Foo   208617990 = 160765256   208617990 = InterfaceTypeImpl]
// GenericContainer => GenericContainer  GENERIC [T = T   521814042 = 521814042   521814042 = TypeParameterTypeImpl]
// ContainerFoo => ContainerFoo INTERCEPTED  [T = Foo   521814042 = 160765256   521814042 = InterfaceTypeImpl]
// Object => Object   [      ]
// String => String   [T = String   459756122 = 153217077   459756122 = InterfaceTypeImpl]
// List<String> => List<String>   [T = E,E = String   194905962 = 40007411,40007411 = 153217077   194905962 = TypeParameterTypeImpl,40007411 = InterfaceTypeImpl]
// T => T   [      ]
// List<T> => List<T>   [T = E,E = T   194905962 = 40007411,40007411 = 47246589   194905962 = TypeParameterTypeImpl,40007411 = TypeParameterTypeImpl]
// dynamic => dynamic   [      ]
// ST => ST   [      ]
// int => int   [T = num   459756122 = 148975391   459756122 = InterfaceTypeImpl]
// double => double   [T = num   459756122 = 148975391   459756122 = InterfaceTypeImpl]
// bool => bool   [      ]
// void => void   [      ]
// generics.SimpleGeneric<generics.Param> => generics.SimpleGeneric<generics.Param> INTERCEPTED  [T = Param   101133199 = 98027057   101133199 = InterfaceTypeImpl]
// A => A   [      ]
// B => B   [      ]
// generics.ComplexGeneric<generics.Param,A> => generics.ComplexGeneric<generics.Param,A>   [A = Param,B = A   271105151 = 98027057,429580744 = 492680764   271105151 = InterfaceTypeImpl,429580744 = TypeParameterTypeImpl]
// TypePlugin<foo.Foo> => TypePlugin<foo.Foo>   [T = Foo   69357257 = 160765256   69357257 = InterfaceTypeImpl]
// List<dynamic> => List<dynamic>   [T = E,E = dynamic   194905962 = 40007411,40007411 = 1   194905962 = TypeParameterTypeImpl,40007411 = DynamicTypeImpl]
// generics.SimpleGeneric<dynamic> => generics.SimpleGeneric<dynamic>   [T = dynamic   101133199 = 1   101133199 = DynamicTypeImpl]
// TypePlugin<generics.SimpleGeneric> => TypePlugin<generics.SimpleGeneric>   [T = SimpleGeneric<dynamic>   69357257 = 250720148   69357257 = InterfaceTypeImpl]
// generics.SimpleGeneric<T> => generics.SimpleGeneric<T>   [T = T   101133199 = 208617990   101133199 = TypeParameterTypeImpl]
// AbstractGeneric<foo.Foo> => AbstractGeneric<foo.Foo> INTERCEPTED  [T = Foo   208617990 = 160765256   208617990 = InterfaceTypeImpl]
// generics.SimpleGeneric<foo.Foo> => generics.SimpleGeneric<foo.Foo> INTERCEPTED  [T = T   101133199 = 208617990   101133199 = TypeParameterTypeImpl]
// AbstractGeneric<T> => AbstractGeneric<T>   [T = T   208617990 = 521814042   208617990 = TypeParameterTypeImpl]
// GenericContainer<foo.Foo> => GenericContainer<foo.Foo>   [T = Foo   521814042 = 160765256   521814042 = InterfaceTypeImpl]
// **************************************************************************
// no interceptor for [SubtypesOf]
// type arguments[1]:
// T[47246589] => T[47246589]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 47246589
// argument: T 47246589
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [AnnotatedWith]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: AnnotatedWith 1
// TYPE PATH:
//  AnnotatedWith
// **************************************************************************
// no interceptor for [Pluggable]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// plugin: SimplePlugin
// plugin: MoreComplexPlugin
// plugin: PluginOnGeneric
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: Pluggable 1
// TYPE PATH:
//  Pluggable
// **************************************************************************
// no interceptor for [TypePlugin]
// type arguments[1]:
// T[69357257] => T[69357257]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 69357257
// argument: T 69357257
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// interceptor for [foo.Foo]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// plugin: SimplePlugin
// plugin: MoreComplexPlugin
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: foo.Foo 1
// config: stringField FooField
// config: integerField 124
// TYPE PATH:
//  foo.Foo
class $foo_Foo extends foo.Foo implements Pluggable {
  late SimplePlugin simplePlugin;
  late MoreComplexPlugin moreComplexPlugin;
  $foo_Foo() {
    simplePlugin = new $SimplePlugin(this);
    moreComplexPlugin = new $MoreComplexPlugin(this);
  }
  T plugin<T>() {
    if (T == SimplePlugin) {
      return simplePlugin as T;
    }
    if (T == MoreComplexPlugin) {
      return moreComplexPlugin as T;
    }
    throw new Exception('no plugin for this type');
  }

// String className
// c: String
  String get className => "foo.Foo";
// String stringField
// c: String
  String get stringField => "FooField";
// int integerField
// c: int
  int get integerField => 124;
  String format(String prefix) {
    List<dynamic> args = [prefix];
    args = simplePlugin.beforeFormat(args[0]);
    prefix = args[0];
    var ret = super.format(prefix);
    ret = simplePlugin.afterFormat(ret);
    return ret;
  }
}

// **************************************************************************
// interceptor for [foo.FooChild]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: foo.FooChild 1
// config: stringField FooChildField
// config: doubleField 0.55
// config: booleanField true
// config: foo.Foo 2
// config: integerField 124
// TYPE PATH:
//  foo.FooChild
//  foo.Foo
class $foo_FooChild extends foo.FooChild implements Pluggable {
  $foo_FooChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// double doubleField
// c: double
  double get doubleField => 0.55;
// bool booleanField
// c: bool
  bool get booleanField => true;
// String className
// c: String
  String get className => "foo.FooChild";
// String stringField
// c: String
  String get stringField => "FooChildField";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [foo.FooChild2]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: foo.FooChild2 1
// config: stringField FooChild2Field
// config: doubleField 0.55
// config: booleanField true
// config: foo.Foo 2
// config: integerField 124
// TYPE PATH:
//  foo.FooChild2
//  foo.Foo
class $foo_FooChild2 extends foo.FooChild2 implements Pluggable {
  $foo_FooChild2(requiredString) {
//String
    this.requiredString = requiredString;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String requiredString
// c: String
// String className
// c: String
  String get className => "foo.FooChild2";
// String stringField
// c: String
  String get stringField => "FooChild2Field";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [bar.Bar]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: bar.Bar 1
// config: stringField BarStringField
// TYPE PATH:
//  bar.Bar
class $bar_Bar extends bar.Bar implements Pluggable {
  $bar_Bar() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// List<String> classNames
// c: List<String>
  List<String> get classNames => [];
// String stringField
// c: String
  String get stringField => "BarStringField";
}

// **************************************************************************
// interceptor for [bar.BarChild]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Bar [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: bar.BarChild 1
// config: stringField BarChildStringField
// config: bar.Bar 2
// TYPE PATH:
//  bar.BarChild
//  bar.Bar
class $bar_BarChild extends bar.BarChild implements Pluggable {
  $bar_BarChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// List<String> classNames
// c: List<String>
  List<String> get classNames => ['bar.BarChild'];
// String stringField
// c: String
  String get stringField => "BarChildStringField";
}

// **************************************************************************
// no interceptor for [generics.SimpleGeneric]
// type arguments[1]:
// T[101133199] => T[101133199]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
// **************************************************************************
// interceptor for [generics.Param]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.Param 1
// TYPE PATH:
//  generics.Param
class $generics_Param extends generics.Param implements Pluggable {
  $generics_Param() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// interceptor for [generics.SimpleSpecific]
// type arguments[1]:
// T[101133199] => Param[98027057]
// type arguments[2]:
// can be singleton: TRUE
// parent: SimpleGeneric [@bool get Compose]
// parameter: T 101133199
// argument: Param 98027057
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.SimpleSpecific 1
// config: generics.SimpleGeneric 2
// TYPE PATH:
//  generics.SimpleSpecific
//  generics.SimpleGeneric
class $generics_SimpleSpecific extends generics.SimpleSpecific
    implements Pluggable {
  $generics_SimpleSpecific() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [generics.ComplexGeneric]
// type arguments[1]:
// A[271105151] => A[271105151]
// B[429580744] => B[429580744]
// type arguments[2]:
// can be singleton: FALSE
// parameter: A 271105151
// parameter: B 429580744
// argument: A 271105151
// argument: B 429580744
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.ComplexGeneric 1
// TYPE PATH:
//  generics.ComplexGeneric
// **************************************************************************
// no interceptor for [generics.SuperComplexGeneric]
// type arguments[1]:
// A[271105151] => Param[98027057]
// B[429580744] => A[492680764]
// A[492680764] => A[492680764]
// B[352514619] => B[352514619]
// type arguments[2]:
// can be singleton: FALSE
// parameter: A 492680764
// parameter: B 352514619
// argument: A 492680764
// argument: B 352514619
// parent: ComplexGeneric [@bool get Compose]
// parameter: A 271105151
// parameter: B 429580744
// argument: Param 98027057
// argument: A 492680764
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.SuperComplexGeneric 1
// config: generics.ComplexGeneric 2
// TYPE PATH:
//  generics.SuperComplexGeneric
//  generics.ComplexGeneric
// **************************************************************************
// interceptor for [SimplePlugin]
// type arguments[1]:
// T[69357257] => Foo[160765256]
// type arguments[2]:
// can be singleton: FALSE
// parent: TypePlugin [@bool get ComposeSubtypes]
// parameter: T 69357257
// argument: Foo 160765256
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: SimplePlugin 1
// config: TypePlugin 2
// TYPE PATH:
//  SimplePlugin
//  TypePlugin
class $SimplePlugin extends SimplePlugin implements Pluggable {
  $SimplePlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
// foo.Foo parent
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
}

// **************************************************************************
// interceptor for [MoreComplexPlugin]
// type arguments[1]:
// T[69357257] => Foo[160765256]
// type arguments[2]:
// can be singleton: FALSE
// parent: TypePlugin [@bool get ComposeSubtypes]
// parameter: T 69357257
// argument: Foo 160765256
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: MoreComplexPlugin 1
// config: TypePlugin 2
// TYPE PATH:
//  MoreComplexPlugin
//  TypePlugin
class $MoreComplexPlugin extends MoreComplexPlugin implements Pluggable {
  $MoreComplexPlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// bar.Bar barField
// c: bar.Bar
// c: bar.BarChild
  bar.Bar get barField => $om.bar_Bar;
// foo.Foo parent
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
}

// **************************************************************************
// interceptor for [PluginOnGeneric]
// type arguments[1]:
// T[69357257] => SimpleGeneric<dynamic>[250720148]
// type arguments[2]:
// can be singleton: FALSE
// parent: TypePlugin [@bool get ComposeSubtypes]
// parameter: T 69357257
// argument: SimpleGeneric 250720148
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: PluginOnGeneric 1
// config: TypePlugin 2
// TYPE PATH:
//  PluginOnGeneric
//  TypePlugin
class $PluginOnGeneric extends PluginOnGeneric implements Pluggable {
  $PluginOnGeneric(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// bar.Bar barField
// c: bar.Bar
// c: bar.BarChild
  bar.Bar get barField => $om.bar_Bar;
// generics.SimpleGeneric parent
// c: generics.SimpleGeneric
}

// **************************************************************************
// no interceptor for [AbstractGeneric]
// type arguments[1]:
// T[208617990] => T[208617990]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 208617990
// argument: T 208617990
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: AbstractGeneric 1
// TYPE PATH:
//  AbstractGeneric
// **************************************************************************
// interceptor for [GenericTypedWithFoo]
// type arguments[1]:
// T[208617990] => Foo[160765256]
// type arguments[2]:
// can be singleton: TRUE
// parent: AbstractGeneric [@bool get Compose]
// parameter: T 208617990
// argument: Foo 160765256
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: GenericTypedWithFoo 1
// config: AbstractGeneric 2
// TYPE PATH:
//  GenericTypedWithFoo
//  AbstractGeneric
class $GenericTypedWithFoo extends GenericTypedWithFoo implements Pluggable {
  $GenericTypedWithFoo() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// foo.Foo element
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
  foo.Foo get element => $om.foo_Foo;
// generics.SimpleGeneric<foo.Foo> generic
// c: generics.SimpleGeneric<foo.Foo>
  generics.SimpleGeneric<foo.Foo> get generic =>
      $om.generics_SimpleGeneric_foo_Foo_;
}

// **************************************************************************
// no interceptor for [GenericContainer]
// type arguments[1]:
// T[521814042] => T[521814042]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 521814042
// argument: T 521814042
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: GenericContainer 1
// TYPE PATH:
//  GenericContainer
// **************************************************************************
// interceptor for [ContainerFoo]
// type arguments[1]:
// T[521814042] => Foo[160765256]
// type arguments[2]:
// can be singleton: TRUE
// parent: GenericContainer []
// parameter: T 521814042
// argument: Foo 160765256
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: ContainerFoo 1
// config: GenericContainer 2
// TYPE PATH:
//  ContainerFoo
//  GenericContainer
class $ContainerFoo extends ContainerFoo implements Pluggable {
  $ContainerFoo() {
//AbstractGeneric<T>
//create
//AbstractGeneric<foo.Foo>
// c: GenericTypedWithFoo
// c: AbstractGeneric<foo.Foo>
    this.genericFoo = new $AbstractGeneric_foo_Foo_();
//T
//create
//foo.Foo
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
    this.child = new $foo_Foo();
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
// AbstractGeneric<foo.Foo> genericFoo
// c: GenericTypedWithFoo
// c: AbstractGeneric<foo.Foo>
// foo.Foo child
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
}

// **************************************************************************
// no interceptor for [Object]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// plugin: SimplePlugin
// plugin: MoreComplexPlugin
// plugin: PluginOnGeneric
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: Object 1
// TYPE PATH:
//  Object
// **************************************************************************
// no interceptor for [String]
// type arguments[1]:
// T[459756122] => String[153217077]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: String 153217077
// parent: Pattern []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: String 1
// TYPE PATH:
//  String
// **************************************************************************
// no interceptor for [List<String>]
// type arguments[1]:
// T[194905962] => E[40007411]
// E[37912016] => E[40007411]
// E[40007411] => String[153217077]
// type arguments[2]:
// ENCLOSING: XXX
// String[712029932]
// can be singleton: FALSE
// parameter: E 40007411
// argument: E 40007411
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 194905962
// argument: E 40007411
// parent: Iterable []
// parameter: E 37912016
// argument: E 40007411
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [T]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [List<T>]
// type arguments[1]:
// T[194905962] => E[40007411]
// E[37912016] => E[40007411]
// E[40007411] => T[47246589]
// type arguments[2]:
// ENCLOSING: NULL
// T[734614886]
// can be singleton: FALSE
// parameter: E 40007411
// argument: E 40007411
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 194905962
// argument: E 40007411
// parent: Iterable []
// parameter: E 37912016
// argument: E 40007411
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [dynamic]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [ST]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [int]
// type arguments[1]:
// T[459756122] => num[148975391]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: num 148975391
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: int 1
// config: num 2
// TYPE PATH:
//  int
//  num
// **************************************************************************
// no interceptor for [double]
// type arguments[1]:
// T[459756122] => num[148975391]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: num 148975391
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: double 1
// config: num 2
// TYPE PATH:
//  double
//  num
// **************************************************************************
// no interceptor for [bool]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: bool 1
// TYPE PATH:
//  bool
// **************************************************************************
// no interceptor for [void]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// interceptor for [generics.SimpleGeneric<generics.Param>]
// type arguments[1]:
// T[101133199] => Param[98027057]
// type arguments[2]:
// ENCLOSING: XXX
// Param[520939606]
// can be singleton: TRUE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
//parametrized type
class $generics_SimpleGeneric_generics_Param_
    extends generics.SimpleGeneric<generics.Param> implements Pluggable {
  $generics_SimpleGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [A]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [B]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [generics.ComplexGeneric<generics.Param,A>]
// type arguments[1]:
// A[271105151] => Param[98027057]
// B[429580744] => A[492680764]
// type arguments[2]:
// ENCLOSING: XXX
// Param[520939606]
// ENCLOSING: NULL
// A[87069580]
// can be singleton: FALSE
// parameter: A 271105151
// parameter: B 429580744
// argument: A 271105151
// argument: B 429580744
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.ComplexGeneric 1
// TYPE PATH:
//  generics.ComplexGeneric
// **************************************************************************
// no interceptor for [TypePlugin<foo.Foo>]
// type arguments[1]:
// T[69357257] => Foo[160765256]
// type arguments[2]:
// ENCLOSING: XXX
// Foo[546170778]
// can be singleton: FALSE
// parameter: T 69357257
// argument: T 69357257
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// no interceptor for [List<dynamic>]
// type arguments[1]:
// T[194905962] => E[40007411]
// E[37912016] => E[40007411]
// E[40007411] => dynamic[1]
// type arguments[2]:
// ENCLOSING: NULL
// dynamic[177495020]
// can be singleton: FALSE
// parameter: E 40007411
// argument: E 40007411
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 194905962
// argument: E 40007411
// parent: Iterable []
// parameter: E 37912016
// argument: E 40007411
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [generics.SimpleGeneric<dynamic>]
// type arguments[1]:
// T[101133199] => dynamic[1]
// type arguments[2]:
// ENCLOSING: NULL
// dynamic[177495020]
// can be singleton: FALSE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// plugin: PluginOnGeneric
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
// **************************************************************************
// no interceptor for [TypePlugin<generics.SimpleGeneric>]
// type arguments[1]:
// T[69357257] => SimpleGeneric<dynamic>[250720148]
// type arguments[2]:
// ENCLOSING: XXX
// SimpleGeneric<dynamic>[488613334]
// can be singleton: FALSE
// parameter: T 69357257
// argument: T 69357257
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// no interceptor for [generics.SimpleGeneric<T>]
// type arguments[1]:
// T[101133199] => T[208617990]
// type arguments[2]:
// ENCLOSING: NULL
// T[734614886]
// can be singleton: FALSE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
// **************************************************************************
// interceptor for [AbstractGeneric<foo.Foo>]
// type arguments[1]:
// T[208617990] => Foo[160765256]
// type arguments[2]:
// ENCLOSING: XXX
// Foo[546170778]
// can be singleton: TRUE
// parameter: T 208617990
// argument: T 208617990
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: AbstractGeneric 1
// TYPE PATH:
//  AbstractGeneric
//parametrized type
class $AbstractGeneric_foo_Foo_ extends AbstractGeneric<foo.Foo>
    implements Pluggable {
  $AbstractGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// foo.Foo element
// c: foo.Foo
// c: foo.FooChild
// c: foo.FooChild2
  foo.Foo get element => $om.foo_Foo;
// generics.SimpleGeneric<foo.Foo> generic
// c: generics.SimpleGeneric<foo.Foo>
  generics.SimpleGeneric<foo.Foo> get generic =>
      $om.generics_SimpleGeneric_foo_Foo_;
}

// **************************************************************************
// interceptor for [generics.SimpleGeneric<foo.Foo>]
// type arguments[1]:
// T[101133199] => T[208617990]
// type arguments[2]:
// ENCLOSING: XXX
// Foo[546170778]
// can be singleton: TRUE
// parameter: T 101133199
// argument: T 101133199
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.SimpleGeneric 1
// TYPE PATH:
//  generics.SimpleGeneric
//parametrized type
class $generics_SimpleGeneric_foo_Foo_ extends generics.SimpleGeneric<foo.Foo>
    implements Pluggable {
  $generics_SimpleGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [AbstractGeneric<T>]
// type arguments[1]:
// T[208617990] => T[521814042]
// type arguments[2]:
// ENCLOSING: NULL
// T[734614886]
// can be singleton: FALSE
// parameter: T 208617990
// argument: T 208617990
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: AbstractGeneric 1
// TYPE PATH:
//  AbstractGeneric
// **************************************************************************
// no interceptor for [GenericContainer<foo.Foo>]
// type arguments[1]:
// T[521814042] => Foo[160765256]
// type arguments[2]:
// ENCLOSING: XXX
// Foo[546170778]
// can be singleton: FALSE
// parameter: T 521814042
// argument: T 521814042
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: GenericContainer 1
// TYPE PATH:
//  GenericContainer
// **************************************************************************
// no interceptor for [SubtypesOf<T>]
// type arguments[1]:
// T[47246589] => T[47246589]
// type arguments[2]:
// ENCLOSING: NULL
// T[734614886]
// can be singleton: FALSE
// parameter: T 47246589
// argument: T 47246589
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [TypePlugin<T>]
// type arguments[1]:
// T[69357257] => T[69357257]
// type arguments[2]:
// ENCLOSING: NULL
// T[734614886]
// can be singleton: FALSE
// parameter: T 69357257
// argument: T 69357257
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// no interceptor for [generics.ComplexGeneric<A,B>]
// type arguments[1]:
// A[271105151] => A[271105151]
// B[429580744] => B[429580744]
// type arguments[2]:
// ENCLOSING: NULL
// A[87069580]
// ENCLOSING: NULL
// B[552887052]
// can be singleton: FALSE
// parameter: A 271105151
// parameter: B 429580744
// argument: A 271105151
// argument: B 429580744
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.ComplexGeneric 1
// TYPE PATH:
//  generics.ComplexGeneric
// **************************************************************************
// no interceptor for [generics.SuperComplexGeneric<A,B>]
// type arguments[1]:
// A[271105151] => Param[98027057]
// B[429580744] => A[492680764]
// A[492680764] => A[492680764]
// B[352514619] => B[352514619]
// type arguments[2]:
// ENCLOSING: NULL
// A[87069580]
// ENCLOSING: NULL
// B[552887052]
// can be singleton: FALSE
// parameter: A 492680764
// parameter: B 352514619
// argument: A 492680764
// argument: B 352514619
// parent: ComplexGeneric [@bool get Compose]
// parameter: A 271105151
// parameter: B 429580744
// argument: Param 98027057
// argument: A 492680764
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: generics.SuperComplexGeneric 1
// config: generics.ComplexGeneric 2
// TYPE PATH:
//  generics.SuperComplexGeneric
//  generics.ComplexGeneric
// **************************************************************************
// no interceptor for [GenericContainer<T>]
// type arguments[1]:
// T[521814042] => T[521814042]
// type arguments[2]:
// ENCLOSING: NULL
// T[734614886]
// can be singleton: FALSE
// parameter: T 521814042
// argument: T 521814042
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: GenericContainer 1
// TYPE PATH:
//  GenericContainer
// **************************************************************************
// no interceptor for [num]
// type arguments[1]:
// T[459756122] => num[148975391]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: num 148975391
// CONFIG
// config: foo.Foo {stringField: FooField, integerField: 124}
// config: foo.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: foo.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bar.Bar {stringField: BarStringField}
// config: bar.BarChild {stringField: BarChildStringField}
// config: num 1
// TYPE PATH:
//  num
// **************************************************************************
class $ObjectManager {
  $foo_Foo? _foo_Foo;
  $foo_Foo get foo_Foo {
    if (_foo_Foo == null) {
      _foo_Foo = new $foo_Foo();
    }
    return _foo_Foo as $foo_Foo;
  }

  $foo_FooChild? _foo_FooChild;
  $foo_FooChild get foo_FooChild {
    if (_foo_FooChild == null) {
      _foo_FooChild = new $foo_FooChild();
    }
    return _foo_FooChild as $foo_FooChild;
  }

  $bar_Bar? _bar_Bar;
  $bar_Bar get bar_Bar {
    if (_bar_Bar == null) {
      _bar_Bar = new $bar_Bar();
    }
    return _bar_Bar as $bar_Bar;
  }

  $bar_BarChild? _bar_BarChild;
  $bar_BarChild get bar_BarChild {
    if (_bar_BarChild == null) {
      _bar_BarChild = new $bar_BarChild();
    }
    return _bar_BarChild as $bar_BarChild;
  }

  $generics_Param? _generics_Param;
  $generics_Param get generics_Param {
    if (_generics_Param == null) {
      _generics_Param = new $generics_Param();
    }
    return _generics_Param as $generics_Param;
  }

  $generics_SimpleSpecific? _generics_SimpleSpecific;
  $generics_SimpleSpecific get generics_SimpleSpecific {
    if (_generics_SimpleSpecific == null) {
      _generics_SimpleSpecific = new $generics_SimpleSpecific();
    }
    return _generics_SimpleSpecific as $generics_SimpleSpecific;
  }

  $GenericTypedWithFoo? _genericTypedWithFoo;
  $GenericTypedWithFoo get genericTypedWithFoo {
    if (_genericTypedWithFoo == null) {
      _genericTypedWithFoo = new $GenericTypedWithFoo();
    }
    return _genericTypedWithFoo as $GenericTypedWithFoo;
  }

  $ContainerFoo? _containerFoo;
  $ContainerFoo get containerFoo {
    if (_containerFoo == null) {
      _containerFoo = new $ContainerFoo();
    }
    return _containerFoo as $ContainerFoo;
  }

  $generics_SimpleGeneric_generics_Param_?
      _generics_SimpleGeneric_generics_Param_;
  $generics_SimpleGeneric_generics_Param_
      get generics_SimpleGeneric_generics_Param_ {
    if (_generics_SimpleGeneric_generics_Param_ == null) {
      _generics_SimpleGeneric_generics_Param_ =
          new $generics_SimpleGeneric_generics_Param_();
    }
    return _generics_SimpleGeneric_generics_Param_
        as $generics_SimpleGeneric_generics_Param_;
  }

  $AbstractGeneric_foo_Foo_? _abstractGeneric_foo_Foo_;
  $AbstractGeneric_foo_Foo_ get abstractGeneric_foo_Foo_ {
    if (_abstractGeneric_foo_Foo_ == null) {
      _abstractGeneric_foo_Foo_ = new $AbstractGeneric_foo_Foo_();
    }
    return _abstractGeneric_foo_Foo_ as $AbstractGeneric_foo_Foo_;
  }

  $generics_SimpleGeneric_foo_Foo_? _generics_SimpleGeneric_foo_Foo_;
  $generics_SimpleGeneric_foo_Foo_ get generics_SimpleGeneric_foo_Foo_ {
    if (_generics_SimpleGeneric_foo_Foo_ == null) {
      _generics_SimpleGeneric_foo_Foo_ = new $generics_SimpleGeneric_foo_Foo_();
    }
    return _generics_SimpleGeneric_foo_Foo_ as $generics_SimpleGeneric_foo_Foo_;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 11ms
