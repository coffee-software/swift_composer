// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'plugins.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2022-11-06 11:25:01.732920
// **************************************************************************
// CONFIG
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/.dart_tool/..//lib/swift_composer.di.yaml
// config file for foo: /home/fsw/workspace/swift_shop/packages/swift_composer/test/plugins/../lib/foo.di.yaml
// config file for bar: /home/fsw/workspace/swift_shop/packages/swift_composer/test/plugins/../lib/bar.di.yaml
// no config file for generics: /home/fsw/workspace/swift_shop/packages/swift_composer/test/plugins/../lib/generics.di.yaml
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/test/plugins/plugins.di.yaml
// **************************************************************************
// MERGED CONFIG
// foo.Foo: {stringField: FooField, integerField: 124}
// foo.FooChild: {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// foo.FooChild2: {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// bar.Bar: {stringField: BarStringField}
// bar.BarChild: {stringField: BarChildStringField}
// **************************************************************************
// **************************************************************************
// no interceptor for [SubtypesOf]
// **************************************************************************
// no interceptor for [AnnotatedWith]
// **************************************************************************
// no interceptor for [Pluggable]
// **************************************************************************
// no interceptor for [TypePlugin]
// **************************************************************************
// interceptor for [foo.Foo]
class $foo_Foo extends foo.Foo implements Pluggable {
  late SimplePlugin simplePlugin;
  late MoreComplexPlugin moreComplexPlugin;
  $foo_Foo() {
    simplePlugin = new $SimplePlugin(this);
    moreComplexPlugin = new $MoreComplexPlugin(this);
  }
  T plugin<T>() {
    if (T == SimplePlugin) {
      return simplePlugin as T;
    }
    if (T == MoreComplexPlugin) {
      return moreComplexPlugin as T;
    }
    throw new Exception('no plugin for this type');
  }

// String className
  String get className => "foo.Foo";
// String stringField
  String get stringField => "FooField";
// int integerField
  int get integerField => 124;
//method format override
  String format(String prefix) {
    List<dynamic> args = [prefix];
    args = simplePlugin.beforeFormat(args[0]);
    prefix = args[0];
    var ret = super.format(prefix);
    ret = simplePlugin.afterFormat(ret);
    return ret;
  }
}

// **************************************************************************
// interceptor for [foo.FooChild]
class $foo_FooChild extends foo.FooChild implements Pluggable {
  late SimplePlugin simplePlugin;
  late MoreComplexPlugin moreComplexPlugin;
  $foo_FooChild() {
    simplePlugin = new $SimplePlugin(this);
    moreComplexPlugin = new $MoreComplexPlugin(this);
  }
  T plugin<T>() {
    if (T == SimplePlugin) {
      return simplePlugin as T;
    }
    if (T == MoreComplexPlugin) {
      return moreComplexPlugin as T;
    }
    throw new Exception('no plugin for this type');
  }

// double doubleField
  double get doubleField => 0.55;
// bool booleanField
  bool get booleanField => true;
// String className
  String get className => "foo.FooChild";
// String stringField
  String get stringField => "FooChildField";
// int integerField
  int get integerField => 124;
//method format override
  String format(String prefix) {
    List<dynamic> args = [prefix];
    args = simplePlugin.beforeFormat(args[0]);
    prefix = args[0];
    var ret = super.format(prefix);
    ret = simplePlugin.afterFormat(ret);
    return ret;
  }
}

// **************************************************************************
// interceptor for [foo.FooChild2]
class $foo_FooChild2 extends foo.FooChild2 implements Pluggable {
  late SimplePlugin simplePlugin;
  late MoreComplexPlugin moreComplexPlugin;
  $foo_FooChild2(requiredString) {
//String
    this.requiredString = requiredString;
    simplePlugin = new $SimplePlugin(this);
    moreComplexPlugin = new $MoreComplexPlugin(this);
  }
  T plugin<T>() {
    if (T == SimplePlugin) {
      return simplePlugin as T;
    }
    if (T == MoreComplexPlugin) {
      return moreComplexPlugin as T;
    }
    throw new Exception('no plugin for this type');
  }

// String requiredString
// String className
  String get className => "foo.FooChild2";
// String stringField
  String get stringField => "FooChild2Field";
// int integerField
  int get integerField => 124;
//method format override
  String format(String prefix) {
    List<dynamic> args = [prefix];
    args = simplePlugin.beforeFormat(args[0]);
    prefix = args[0];
    var ret = super.format(prefix);
    ret = simplePlugin.afterFormat(ret);
    return ret;
  }
}

// **************************************************************************
// interceptor for [bar.Bar]
class $bar_Bar extends bar.Bar implements Pluggable {
  $bar_Bar() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// List<String> classNames
  List<String> get classNames => [];
// String stringField
  String get stringField => "BarStringField";
}

// **************************************************************************
// interceptor for [bar.BarChild]
class $bar_BarChild extends bar.BarChild implements Pluggable {
  $bar_BarChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// List<String> classNames
  List<String> get classNames => ['bar.BarChild'];
// String stringField
  String get stringField => "BarChildStringField";
}

// **************************************************************************
// no interceptor for [generics.SimpleGeneric]
// **************************************************************************
// interceptor for [generics.Param]
class $generics_Param extends generics.Param implements Pluggable {
  $generics_Param() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// interceptor for [generics.SimpleSpecific]
class $generics_SimpleSpecific extends generics.SimpleSpecific
    implements Pluggable {
  late PluginOnGeneric pluginOnGeneric;
  $generics_SimpleSpecific() {
    pluginOnGeneric = new $PluginOnGeneric(this);
  }
  T plugin<T>() {
    if (T == PluginOnGeneric) {
      return pluginOnGeneric as T;
    }
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [generics.ComplexGeneric]
// **************************************************************************
// no interceptor for [generics.SuperComplexGeneric]
// **************************************************************************
// interceptor for [SimplePlugin]
class $SimplePlugin extends SimplePlugin implements Pluggable {
  $SimplePlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
// foo.Foo parent
}

// **************************************************************************
// interceptor for [MoreComplexPlugin]
class $MoreComplexPlugin extends MoreComplexPlugin implements Pluggable {
  $MoreComplexPlugin(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// bar.Bar barField
  bar.Bar get barField => $om.bar_Bar;
// foo.Foo parent
}

// **************************************************************************
// interceptor for [PluginOnGeneric]
class $PluginOnGeneric extends PluginOnGeneric implements Pluggable {
  $PluginOnGeneric(parent) {
//T
    this.parent = parent;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// bar.Bar barField
  bar.Bar get barField => $om.bar_Bar;
// generics.SimpleGeneric parent
}

// **************************************************************************
// no interceptor for [AbstractGeneric]
// **************************************************************************
// interceptor for [GenericTypedWithFoo]
class $GenericTypedWithFoo extends GenericTypedWithFoo implements Pluggable {
  $GenericTypedWithFoo() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// foo.Foo element
  foo.Foo get element => $om.foo_Foo;
// generics.SimpleGeneric<foo.Foo> generic
  generics.SimpleGeneric<foo.Foo> get generic =>
      $om.generics_SimpleGeneric_foo_Foo_;
}

// **************************************************************************
// no interceptor for [GenericContainer]
// **************************************************************************
// interceptor for [ContainerFoo]
class $ContainerFoo extends ContainerFoo implements Pluggable {
  $ContainerFoo() {
//AbstractGeneric<T>
    this.genericFoo = new $AbstractGeneric_foo_Foo_();
//T
    this.child = new $foo_Foo();
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
// AbstractGeneric<foo.Foo> genericFoo
// foo.Foo child
}

// **************************************************************************
// no interceptor for [Object]
// **************************************************************************
// no interceptor for [String]
// **************************************************************************
// no interceptor for [List<String>]
// **************************************************************************
// no interceptor for [T]
// **************************************************************************
// no interceptor for [List<T>]
// **************************************************************************
// no interceptor for [dynamic]
// **************************************************************************
// no interceptor for [ST]
// **************************************************************************
// no interceptor for [int]
// **************************************************************************
// no interceptor for [double]
// **************************************************************************
// no interceptor for [bool]
// **************************************************************************
// no interceptor for [void]
// **************************************************************************
// interceptor for [generics.SimpleGeneric<generics.Param>]
//parametrized type
class $generics_SimpleGeneric_generics_Param_
    extends generics.SimpleGeneric<generics.Param> implements Pluggable {
  late PluginOnGeneric pluginOnGeneric;
  $generics_SimpleGeneric() {
    pluginOnGeneric = new $PluginOnGeneric(this);
  }

  T plugin<T>() {
    if (T == PluginOnGeneric) {
      return pluginOnGeneric as T;
    }
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [A]
// **************************************************************************
// no interceptor for [B]
// **************************************************************************
// no interceptor for [generics.ComplexGeneric<generics.Param,A>]
// **************************************************************************
// no interceptor for [TypePlugin<foo.Foo>]
// **************************************************************************
// no interceptor for [List<dynamic>]
// **************************************************************************
// no interceptor for [generics.SimpleGeneric<dynamic>]
// **************************************************************************
// no interceptor for [TypePlugin<generics.SimpleGeneric<dynamic>>]
// **************************************************************************
// no interceptor for [generics.SimpleGeneric<T>]
// **************************************************************************
// interceptor for [AbstractGeneric<foo.Foo>]
//parametrized type
class $AbstractGeneric_foo_Foo_ extends AbstractGeneric<foo.Foo>
    implements Pluggable {
  $AbstractGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// foo.Foo element
  foo.Foo get element => $om.foo_Foo;
// generics.SimpleGeneric<foo.Foo> generic
  generics.SimpleGeneric<foo.Foo> get generic =>
      $om.generics_SimpleGeneric_foo_Foo_;
}

// **************************************************************************
// interceptor for [generics.SimpleGeneric<foo.Foo>]
//parametrized type
class $generics_SimpleGeneric_foo_Foo_ extends generics.SimpleGeneric<foo.Foo>
    implements Pluggable {
  late PluginOnGeneric pluginOnGeneric;
  $generics_SimpleGeneric() {
    pluginOnGeneric = new $PluginOnGeneric(this);
  }

  T plugin<T>() {
    if (T == PluginOnGeneric) {
      return pluginOnGeneric as T;
    }
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// no interceptor for [AbstractGeneric<T>]
// **************************************************************************
// no interceptor for [GenericContainer<foo.Foo>]
// **************************************************************************
class $ObjectManager {
  $foo_Foo? _foo_Foo;
  $foo_Foo get foo_Foo {
    if (_foo_Foo == null) {
      _foo_Foo = new $foo_Foo();
    }
    return _foo_Foo as $foo_Foo;
  }

  $foo_FooChild? _foo_FooChild;
  $foo_FooChild get foo_FooChild {
    if (_foo_FooChild == null) {
      _foo_FooChild = new $foo_FooChild();
    }
    return _foo_FooChild as $foo_FooChild;
  }

  $bar_Bar? _bar_Bar;
  $bar_Bar get bar_Bar {
    if (_bar_Bar == null) {
      _bar_Bar = new $bar_Bar();
    }
    return _bar_Bar as $bar_Bar;
  }

  $bar_BarChild? _bar_BarChild;
  $bar_BarChild get bar_BarChild {
    if (_bar_BarChild == null) {
      _bar_BarChild = new $bar_BarChild();
    }
    return _bar_BarChild as $bar_BarChild;
  }

  $generics_Param? _generics_Param;
  $generics_Param get generics_Param {
    if (_generics_Param == null) {
      _generics_Param = new $generics_Param();
    }
    return _generics_Param as $generics_Param;
  }

  $generics_SimpleSpecific? _generics_SimpleSpecific;
  $generics_SimpleSpecific get generics_SimpleSpecific {
    if (_generics_SimpleSpecific == null) {
      _generics_SimpleSpecific = new $generics_SimpleSpecific();
    }
    return _generics_SimpleSpecific as $generics_SimpleSpecific;
  }

  $GenericTypedWithFoo? _genericTypedWithFoo;
  $GenericTypedWithFoo get genericTypedWithFoo {
    if (_genericTypedWithFoo == null) {
      _genericTypedWithFoo = new $GenericTypedWithFoo();
    }
    return _genericTypedWithFoo as $GenericTypedWithFoo;
  }

  $ContainerFoo? _containerFoo;
  $ContainerFoo get containerFoo {
    if (_containerFoo == null) {
      _containerFoo = new $ContainerFoo();
    }
    return _containerFoo as $ContainerFoo;
  }

  $generics_SimpleGeneric_generics_Param_?
      _generics_SimpleGeneric_generics_Param_;
  $generics_SimpleGeneric_generics_Param_
      get generics_SimpleGeneric_generics_Param_ {
    if (_generics_SimpleGeneric_generics_Param_ == null) {
      _generics_SimpleGeneric_generics_Param_ =
          new $generics_SimpleGeneric_generics_Param_();
    }
    return _generics_SimpleGeneric_generics_Param_
        as $generics_SimpleGeneric_generics_Param_;
  }

  $AbstractGeneric_foo_Foo_? _abstractGeneric_foo_Foo_;
  $AbstractGeneric_foo_Foo_ get abstractGeneric_foo_Foo_ {
    if (_abstractGeneric_foo_Foo_ == null) {
      _abstractGeneric_foo_Foo_ = new $AbstractGeneric_foo_Foo_();
    }
    return _abstractGeneric_foo_Foo_ as $AbstractGeneric_foo_Foo_;
  }

  $generics_SimpleGeneric_foo_Foo_? _generics_SimpleGeneric_foo_Foo_;
  $generics_SimpleGeneric_foo_Foo_ get generics_SimpleGeneric_foo_Foo_ {
    if (_generics_SimpleGeneric_foo_Foo_ == null) {
      _generics_SimpleGeneric_foo_Foo_ = new $generics_SimpleGeneric_foo_Foo_();
    }
    return _generics_SimpleGeneric_foo_Foo_ as $generics_SimpleGeneric_foo_Foo_;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 6ms
