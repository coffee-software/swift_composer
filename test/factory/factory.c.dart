// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'factory.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2022-09-04 12:20:41.273194
// **************************************************************************
// CONFIG
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/.dart_tool/..//lib/swift_composer.di.yaml
// config file for module_test: /home/fsw/workspace/swift_shop/packages/swift_composer/test/factory/../lib/foo.di.yaml
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/test/factory/factory.di.yaml
// **************************************************************************
// MERGED CONFIG
// module_test.Foo: {stringField: FooField, integerField: 124}
// module_test.FooChild: {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// module_test.FooChild2: {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// **************************************************************************
// ALL TYPES INFO
// **************************************************************************
// SubtypesOf => SubtypesOf  GENERIC [T = T   473656069 = 473656069   473656069 = TypeParameterTypeImpl]
// AnnotatedWith => AnnotatedWith   [      ]
// Pluggable => Pluggable   [      ]
// TypePlugin => TypePlugin  GENERIC [T = T   380287154 = 380287154   380287154 = TypeParameterTypeImpl]
// module_test.Foo => module_test.Foo INTERCEPTED  [      ]
// module_test.FooChild => module_test.FooChild INTERCEPTED  [      ]
// module_test.FooChild2 => module_test.FooChild2 INTERCEPTED  [      ]
// Complex => Complex INTERCEPTED  [      ]
// Container => Container INTERCEPTED  [      ]
// Object => Object   [      ]
// String => String   [T = String   99862877 = 55285317   99862877 = InterfaceTypeImpl]
// List<String> => List<String>   [T = E,E = String   265238202 = 263610483,263610483 = 55285317   265238202 = TypeParameterTypeImpl,263610483 = InterfaceTypeImpl]
// T => T   [      ]
// List<T> => List<T>   [T = E,E = T   265238202 = 263610483,263610483 = 473656069   265238202 = TypeParameterTypeImpl,263610483 = TypeParameterTypeImpl]
// dynamic => dynamic   [      ]
// ST => ST   [      ]
// int => int   [T = num   99862877 = 235444537   99862877 = InterfaceTypeImpl]
// double => double   [T = num   99862877 = 235444537   99862877 = InterfaceTypeImpl]
// bool => bool   [      ]
// void => void   [      ]
// **************************************************************************
// no interceptor for [SubtypesOf]
// type arguments[1]:
// T[473656069] => T[473656069]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 473656069
// argument: T 473656069
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [AnnotatedWith]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: AnnotatedWith 1
// TYPE PATH:
//  AnnotatedWith
// **************************************************************************
// no interceptor for [Pluggable]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: Pluggable 1
// TYPE PATH:
//  Pluggable
// **************************************************************************
// no interceptor for [TypePlugin]
// type arguments[1]:
// T[380287154] => T[380287154]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 380287154
// argument: T 380287154
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// interceptor for [module_test.Foo]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: module_test.Foo 1
// config: stringField FooField
// config: integerField 124
// TYPE PATH:
//  module_test.Foo
class $module_test_Foo extends module_test.Foo implements Pluggable {
  $module_test_Foo() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String className
// c: String
  String get className => "module_test.Foo";
// String stringField
// c: String
  String get stringField => "FooField";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [module_test.FooChild]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: module_test.FooChild 1
// config: stringField FooChildField
// config: doubleField 0.55
// config: booleanField true
// config: module_test.Foo 2
// config: integerField 124
// TYPE PATH:
//  module_test.FooChild
//  module_test.Foo
class $module_test_FooChild extends module_test.FooChild implements Pluggable {
  $module_test_FooChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// double doubleField
// c: double
  double get doubleField => 0.55;
// bool booleanField
// c: bool
  bool get booleanField => true;
// String className
// c: String
  String get className => "module_test.FooChild";
// String stringField
// c: String
  String get stringField => "FooChildField";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [module_test.FooChild2]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: module_test.FooChild2 1
// config: stringField FooChild2Field
// config: doubleField 0.55
// config: booleanField true
// config: module_test.Foo 2
// config: integerField 124
// TYPE PATH:
//  module_test.FooChild2
//  module_test.Foo
class $module_test_FooChild2 extends module_test.FooChild2
    implements Pluggable {
  $module_test_FooChild2(requiredString) {
//String
    this.requiredString = requiredString;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String requiredString
// c: String
// String className
// c: String
  String get className => "module_test.FooChild2";
// String stringField
// c: String
  String get stringField => "FooChild2Field";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [Complex]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: Complex 1
// TYPE PATH:
//  Complex
class $Complex extends Complex implements Pluggable {
  $Complex(requiredString, requiredFoo) {
//String
    this.requiredString = requiredString;
//Foo
    this.requiredFoo = requiredFoo;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
// String requiredString
// c: String
// module_test.Foo requiredFoo
// c: module_test.Foo
// c: module_test.FooChild
// c: module_test.FooChild2
}

// **************************************************************************
// interceptor for [Container]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: Container 1
// TYPE PATH:
//  Container
class $Container extends Container implements Pluggable {
  $Container() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

//method createFoo override
  module_test.Foo createFoo() {
//module_test.Foo
    return new $module_test_Foo();
  }

//method createComplex override
  Complex createComplex(String requiredString, module_test.Foo requiredFoo) {
//Complex
    return new $Complex(requiredString, requiredFoo);
  }

//method createSubFoo override
  module_test.Foo createSubFoo(String className) {
    switch (className) {
      case 'module_test.Foo':
        return new $module_test_Foo();
      case 'module_test.FooChild':
        return new $module_test_FooChild();
    }
    throw new Exception('no type for ' + className);
  }
}

// **************************************************************************
// no interceptor for [Object]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// CONFIG
// config: Object 1
// TYPE PATH:
//  Object
// **************************************************************************
// no interceptor for [String]
// type arguments[1]:
// T[99862877] => String[55285317]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: String 55285317
// parent: Pattern []
// CONFIG
// config: String 1
// TYPE PATH:
//  String
// **************************************************************************
// no interceptor for [List<String>]
// type arguments[1]:
// T[265238202] => E[263610483]
// E[268730869] => E[263610483]
// E[263610483] => String[55285317]
// type arguments[2]:
// ENCLOSING: XXX
// String[788642279]
// can be singleton: FALSE
// parameter: E 263610483
// argument: E 263610483
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 265238202
// argument: E 263610483
// parent: Iterable []
// parameter: E 268730869
// argument: E 263610483
// CONFIG
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [T]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [List<T>]
// type arguments[1]:
// T[265238202] => E[263610483]
// E[268730869] => E[263610483]
// E[263610483] => T[473656069]
// type arguments[2]:
// ENCLOSING: NULL
// T[196372018]
// can be singleton: FALSE
// parameter: E 263610483
// argument: E 263610483
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 265238202
// argument: E 263610483
// parent: Iterable []
// parameter: E 268730869
// argument: E 263610483
// CONFIG
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [dynamic]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [ST]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [int]
// type arguments[1]:
// T[99862877] => num[235444537]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: num 235444537
// CONFIG
// config: int 1
// config: num 2
// TYPE PATH:
//  int
//  num
// **************************************************************************
// no interceptor for [double]
// type arguments[1]:
// T[99862877] => num[235444537]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: num 235444537
// CONFIG
// config: double 1
// config: num 2
// TYPE PATH:
//  double
//  num
// **************************************************************************
// no interceptor for [bool]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: bool 1
// TYPE PATH:
//  bool
// **************************************************************************
// no interceptor for [void]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [SubtypesOf<T>]
// type arguments[1]:
// T[473656069] => T[473656069]
// type arguments[2]:
// ENCLOSING: NULL
// T[196372018]
// can be singleton: FALSE
// parameter: T 473656069
// argument: T 473656069
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [TypePlugin<T>]
// type arguments[1]:
// T[380287154] => T[380287154]
// type arguments[2]:
// ENCLOSING: NULL
// T[196372018]
// can be singleton: FALSE
// parameter: T 380287154
// argument: T 380287154
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// no interceptor for [num]
// type arguments[1]:
// T[99862877] => num[235444537]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 99862877
// argument: num 235444537
// CONFIG
// config: num 1
// TYPE PATH:
//  num
// **************************************************************************
class $ObjectManager {
  $module_test_Foo? _module_test_Foo;
  $module_test_Foo get module_test_Foo {
    if (_module_test_Foo == null) {
      _module_test_Foo = new $module_test_Foo();
    }
    return _module_test_Foo as $module_test_Foo;
  }

  $module_test_FooChild? _module_test_FooChild;
  $module_test_FooChild get module_test_FooChild {
    if (_module_test_FooChild == null) {
      _module_test_FooChild = new $module_test_FooChild();
    }
    return _module_test_FooChild as $module_test_FooChild;
  }

  $Container? _container;
  $Container get container {
    if (_container == null) {
      _container = new $Container();
    }
    return _container as $Container;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 166ms
