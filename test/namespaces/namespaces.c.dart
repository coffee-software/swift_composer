// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'namespaces.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2021-11-26 14:19:23.494870
//loading config file /home/fsw/workspace/swift_composer/test/lib/module1.di.yaml
//loading config file /home/fsw/workspace/swift_composer/test/lib/module2.di.yaml
// **************************************************************************
// import package:swift_composer/swift_composer.dart
// import asset:swift_composer/test/lib/module1.dart as test_module1
// import asset:swift_composer/test/lib/module2.dart as test_module2
// **************************************************************************
//no interceptor for [AnnotatedWith]
// **************************************************************************
//no interceptor for [Pluggable]
// **************************************************************************
//no interceptor for [TypePlugin]
// **************************************************************************
//interceptor for [test_module1.Foo]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//config: test_module1.Foo 1
//config: stringField FooField
//config: integerField 124
//TYPE PATH:
//   test_module1.Foo
class $test_module1_Foo extends test_module1.Foo implements Pluggable {
  $test_module1_Foo() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  String get className => "test_module1.Foo";
  String get stringField => "FooField";
  int get integerField => 124;
}

// **************************************************************************
//interceptor for [test_module1.FooChild]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Foo [@bool get Compose]
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//config: test_module1.FooChild 1
//config: stringField FooChildField
//config: doubleField 0.55
//config: booleanField true
//config: test_module1.Foo 2
//config: integerField 124
//TYPE PATH:
//   test_module1.FooChild
//   test_module1.Foo
class $test_module1_FooChild extends test_module1.FooChild
    implements Pluggable {
  $test_module1_FooChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  double get doubleField => 0.55;
  bool get booleanField => true;
  String get className => "test_module1.FooChild";
  String get stringField => "FooChildField";
  int get integerField => 124;
}

// **************************************************************************
//interceptor for [test_module1.FooChild2]
//type arguments[1]:
//type arguments[2]:
//can be singleton: FALSE
//parent: Foo [@bool get Compose]
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//config: test_module1.FooChild2 1
//config: stringField FooChild2Field
//config: doubleField 0.55
//config: booleanField true
//config: test_module1.Foo 2
//config: integerField 124
//TYPE PATH:
//   test_module1.FooChild2
//   test_module1.Foo
class $test_module1_FooChild2 extends test_module1.FooChild2
    implements Pluggable {
  $test_module1_FooChild2(requiredString) {
//String
    this.requiredString = requiredString;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  String get className => "test_module1.FooChild2";
  String get stringField => "FooChild2Field";
  int get integerField => 124;
}

// **************************************************************************
//interceptor for [test_module1.Bar]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//config: test_module1.Bar 1
//config: stringField BarField
//TYPE PATH:
//   test_module1.Bar
class $test_module1_Bar extends test_module1.Bar implements Pluggable {
  $test_module1_Bar() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  String get stringField => "BarField";
  List<String> get classNames => [];
}

// **************************************************************************
//interceptor for [test_module1.BarChild]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Bar [@bool get Compose]
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//config: test_module1.BarChild 1
//config: stringField BarChildField
//config: test_module1.Bar 2
//TYPE PATH:
//   test_module1.BarChild
//   test_module1.Bar
class $test_module1_BarChild extends test_module1.BarChild
    implements Pluggable {
  $test_module1_BarChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  String get stringField => "BarChildField";
  List<String> get classNames => ['test_module1.BarChild'];
}

// **************************************************************************
//interceptor for [test_module1.SimpleGeneric]
//type arguments[1]:
//T[402361370] => T[402361370]
//type arguments[2]:
//can be singleton: TRUE
//parameter: T 402361370
//argument: T 402361370
//parent: Object [@pragma pragma(String name, [Object? options])]
//parent: Pluggable []
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//NO ELEMENT!
//config: test_module1.SimpleGeneric<test_module1.T> 1
//TYPE PATH:
//NO ELEMENT!
//   test_module1.SimpleGeneric<test_module1.T>
class $test_module1_SimpleGeneric<T> extends test_module1.SimpleGeneric<T>
    implements Pluggable {
  $test_module1_SimpleGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
//NO ELEMENT!
}

// **************************************************************************
//interceptor for [test_module2.Foo]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//config: test_module2.Foo 1
//config: stringField2 FooStringField2
//TYPE PATH:
//   test_module2.Foo
class $test_module2_Foo extends test_module2.Foo implements Pluggable {
  $test_module2_Foo() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

  String get className => "test_module2.Foo";
  String get stringField2 => "FooStringField2";
}

// **************************************************************************
//interceptor for [test_module2.ComplexGeneric]
//type arguments[1]:
//A[162257751] => A[162257751]
//B[247988282] => B[247988282]
//type arguments[2]:
//can be singleton: TRUE
//parameter: A 162257751
//parameter: B 247988282
//argument: A 162257751
//argument: B 247988282
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//NO ELEMENT!
//NO ELEMENT!
//config: test_module2.ComplexGeneric<test_module2.A,test_module2.B> 1
//TYPE PATH:
//NO ELEMENT!
//NO ELEMENT!
//   test_module2.ComplexGeneric<test_module2.A,test_module2.B>
class $test_module2_ComplexGeneric<A, B>
    extends test_module2.ComplexGeneric<A, B> implements Pluggable {
  $test_module2_ComplexGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
//NO ELEMENT!
}

// **************************************************************************
//interceptor for [test_module2.SuperComplexGeneric]
//type arguments[1]:
//A[162257751] => Foo[214916430]
//B[247988282] => A[17451649]
//A[17451649] => A[17451649]
//B[436879447] => B[436879447]
//type arguments[2]:
//can be singleton: TRUE
//parameter: A 17451649
//parameter: B 436879447
//argument: A 17451649
//argument: B 436879447
//parent: ComplexGeneric [@bool get Compose]
//parameter: A 162257751
//parameter: B 247988282
//argument: Foo 214916430
//argument: A 17451649
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//NO ELEMENT!
//NO ELEMENT!
//NO ELEMENT!
//config: test_module2.SuperComplexGeneric<test_module2.A,test_module2.B> 1
//config: test_module2.ComplexGeneric<test_module2.Foo,test_module2.A> 2
//TYPE PATH:
//NO ELEMENT!
//NO ELEMENT!
//   test_module2.SuperComplexGeneric<test_module2.A,test_module2.B>
//NO ELEMENT!
//   test_module2.ComplexGeneric<test_module2.Foo,test_module2.A>
class $test_module2_SuperComplexGeneric<A, B>
    extends test_module2.SuperComplexGeneric<A, B> implements Pluggable {
  $test_module2_SuperComplexGeneric() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
//NO ELEMENT!
//NO ELEMENT!
}

// **************************************************************************
//interceptor for [Container]
//type arguments[1]:
//type arguments[2]:
//can be singleton: TRUE
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//config: Container 1
//TYPE PATH:
//   Container
class $Container extends Container implements Pluggable {
  $Container() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
//interceptor for [GenericContainer]
//type arguments[1]:
//T[103931676] => T[103931676]
//type arguments[2]:
//can be singleton: TRUE
//parameter: T 103931676
//argument: T 103931676
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//NO ELEMENT!
//config: GenericContainer<T> 1
//TYPE PATH:
//NO ELEMENT!
//   GenericContainer<T>
class $GenericContainer<T> extends GenericContainer<T> implements Pluggable {
  $GenericContainer() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
//interceptor for [FooContainer]
//type arguments[1]:
//T[103931676] => Foo[467258976]
//type arguments[2]:
//can be singleton: TRUE
//parent: GenericContainer [@bool get Compose]
//parameter: T 103931676
//argument: Foo 467258976
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//config: FooContainer 1
//config: GenericContainer<test_module1.Foo> 2
//TYPE PATH:
//   FooContainer
//   GenericContainer<test_module1.Foo>
class $FooContainer extends FooContainer implements Pluggable {
  $FooContainer() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
//no interceptor for [String]
// **************************************************************************
//no interceptor for [int]
// **************************************************************************
//no interceptor for [double]
// **************************************************************************
//no interceptor for [bool]
// **************************************************************************
//no interceptor for [List<String>]
// **************************************************************************
//no interceptor for [test_module1.T]
// **************************************************************************
//no interceptor for [test_module1.SimpleGeneric<test_module1.T>]
// **************************************************************************
//no interceptor for [void]
// **************************************************************************
//no interceptor for [test_module2.A]
// **************************************************************************
//no interceptor for [test_module2.B]
// **************************************************************************
//no interceptor for [test_module2.ComplexGeneric<test_module2.A,test_module2.B>]
// **************************************************************************
//no interceptor for [test_module2.SuperComplexGeneric<test_module2.A,test_module2.B>]
// **************************************************************************
//no interceptor for [test_module2.ComplexGeneric<test_module2.Foo,test_module2.A>]
// **************************************************************************
//no interceptor for [T]
// **************************************************************************
//no interceptor for [GenericContainer<T>]
// **************************************************************************
//interceptor for [GenericContainer<test_module1.Foo>]
//type arguments[1]:
//T[103931676] => T[103931676]
//type arguments[2]:
//ENCLOSING: XXX
//Foo[592715879]
//can be singleton: TRUE
//parameter: T 103931676
//argument: T 103931676
//parent: Object [@pragma pragma(String name, [Object? options])]
//CONFIG
//config: test_module1.Foo {stringField: FooField, integerField: 124}
//config: test_module1.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
//config: test_module1.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
//config: test_module1.Bar {stringField: BarField}
//config: test_module1.BarChild {stringField: BarChildField}
//config: test_module2.Foo {stringField2: FooStringField2}
//NO ELEMENT!
//config: GenericContainer<T> 1
//TYPE PATH:
//NO ELEMENT!
//   GenericContainer<T>
//parametrized type
class $GenericContainer_test_module1_Foo_
    extends $GenericContainer<$test_module1_Foo> implements Pluggable {
  $GenericContainer() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }
}

// **************************************************************************
// All Types:
//AnnotatedWith AnnotatedWith
//Pluggable Pluggable
//TypePlugin TypePlugin
//test_module1.Foo test_module1.Foo
//test_module1.FooChild test_module1.FooChild
//test_module1.FooChild2 test_module1.FooChild2
//test_module1.Bar test_module1.Bar
//test_module1.BarChild test_module1.BarChild
//test_module1.SimpleGeneric test_module1.SimpleGeneric
//test_module2.Foo test_module2.Foo
//test_module2.ComplexGeneric test_module2.ComplexGeneric
//test_module2.SuperComplexGeneric test_module2.SuperComplexGeneric
//Container Container
//GenericContainer GenericContainer
//FooContainer FooContainer
//String String
//int int
//double double
//bool bool
//List<String> List<String>
//test_module1.T test_module1.T
//test_module1.SimpleGeneric<test_module1.T> test_module1.SimpleGeneric<test_module1.T>
//void void
//test_module2.A test_module2.A
//test_module2.B test_module2.B
//test_module2.ComplexGeneric<test_module2.A,test_module2.B> test_module2.ComplexGeneric<test_module2.A,test_module2.B>
//test_module2.SuperComplexGeneric<test_module2.A,test_module2.B> test_module2.SuperComplexGeneric<test_module2.A,test_module2.B>
//test_module2.ComplexGeneric<test_module2.Foo,test_module2.A> test_module2.ComplexGeneric<test_module2.Foo,test_module2.A>
//T T
//GenericContainer<T> GenericContainer<T>
//GenericContainer<test_module1.Foo> GenericContainer<test_module1.Foo>
// **************************************************************************
class $ObjectManager {
  $test_module1_Foo? _test_module1_Foo;
  $test_module1_Foo get test_module1_Foo {
    if (_test_module1_Foo == null) {
      _test_module1_Foo = new $test_module1_Foo();
    }
    return _test_module1_Foo as $test_module1_Foo;
  }

  $test_module1_FooChild? _test_module1_FooChild;
  $test_module1_FooChild get test_module1_FooChild {
    if (_test_module1_FooChild == null) {
      _test_module1_FooChild = new $test_module1_FooChild();
    }
    return _test_module1_FooChild as $test_module1_FooChild;
  }

  $test_module1_Bar? _test_module1_Bar;
  $test_module1_Bar get test_module1_Bar {
    if (_test_module1_Bar == null) {
      _test_module1_Bar = new $test_module1_Bar();
    }
    return _test_module1_Bar as $test_module1_Bar;
  }

  $test_module1_BarChild? _test_module1_BarChild;
  $test_module1_BarChild get test_module1_BarChild {
    if (_test_module1_BarChild == null) {
      _test_module1_BarChild = new $test_module1_BarChild();
    }
    return _test_module1_BarChild as $test_module1_BarChild;
  }

  $test_module1_SimpleGeneric? _test_module1_SimpleGeneric;
  $test_module1_SimpleGeneric get test_module1_SimpleGeneric {
    if (_test_module1_SimpleGeneric == null) {
      _test_module1_SimpleGeneric = new $test_module1_SimpleGeneric();
    }
    return _test_module1_SimpleGeneric as $test_module1_SimpleGeneric;
  }

  $test_module2_Foo? _test_module2_Foo;
  $test_module2_Foo get test_module2_Foo {
    if (_test_module2_Foo == null) {
      _test_module2_Foo = new $test_module2_Foo();
    }
    return _test_module2_Foo as $test_module2_Foo;
  }

  $test_module2_ComplexGeneric? _test_module2_ComplexGeneric;
  $test_module2_ComplexGeneric get test_module2_ComplexGeneric {
    if (_test_module2_ComplexGeneric == null) {
      _test_module2_ComplexGeneric = new $test_module2_ComplexGeneric();
    }
    return _test_module2_ComplexGeneric as $test_module2_ComplexGeneric;
  }

  $test_module2_SuperComplexGeneric? _test_module2_SuperComplexGeneric;
  $test_module2_SuperComplexGeneric get test_module2_SuperComplexGeneric {
    if (_test_module2_SuperComplexGeneric == null) {
      _test_module2_SuperComplexGeneric =
          new $test_module2_SuperComplexGeneric();
    }
    return _test_module2_SuperComplexGeneric
        as $test_module2_SuperComplexGeneric;
  }

  $Container? _container;
  $Container get container {
    if (_container == null) {
      _container = new $Container();
    }
    return _container as $Container;
  }

  $GenericContainer? _genericContainer;
  $GenericContainer get genericContainer {
    if (_genericContainer == null) {
      _genericContainer = new $GenericContainer();
    }
    return _genericContainer as $GenericContainer;
  }

  $FooContainer? _fooContainer;
  $FooContainer get fooContainer {
    if (_fooContainer == null) {
      _fooContainer = new $FooContainer();
    }
    return _fooContainer as $FooContainer;
  }

  $GenericContainer_test_module1_Foo_? _genericContainer_test_module1_Foo_;
  $GenericContainer_test_module1_Foo_ get genericContainer_test_module1_Foo_ {
    if (_genericContainer_test_module1_Foo_ == null) {
      _genericContainer_test_module1_Foo_ =
          new $GenericContainer_test_module1_Foo_();
    }
    return _genericContainer_test_module1_Foo_
        as $GenericContainer_test_module1_Foo_;
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 10ms
