// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'mixins.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2023-02-20 08:04:32.669572
// **************************************************************************
// CONFIG
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/.dart_tool/..//lib/swift_composer.di.yaml
// no config file for root: /home/fsw/workspace/swift_shop/packages/swift_composer/test/mixins/mixins.di.yaml
// **************************************************************************
// MERGED CONFIG
// **************************************************************************
// **************************************************************************
// no interceptor for [SubtypesOf]
// **************************************************************************
// no interceptor for [AnnotatedWith]
// **************************************************************************
// no interceptor for [Pluggable]
// **************************************************************************
// no interceptor for [TypePlugin]
// **************************************************************************
// no interceptor for [TestMixin1]
// **************************************************************************
// no interceptor for [TestMixin2]
// **************************************************************************
// interceptor for [MixinUser1]
class $MixinUser1 extends MixinUser1 implements Pluggable {
  $MixinUser1() {
//String
//String
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String mixin1Field
// String ownField1
//method fieldsToJson override
  void fieldsToJson(Map<dynamic, dynamic> target) {
//compiled method
//@FieldAnnotation
    {
      const name = "mixin1Field";
      {
        target[name] = this.mixin1Field;
      }
    }
    {
      const name = "ownField1";
      {
        target[name] = this.ownField1;
      }
    }
  }
}

// **************************************************************************
// interceptor for [MixinUser2]
class $MixinUser2 extends MixinUser2 implements Pluggable {
  $MixinUser2() {
//String
//String
//String
//String
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String mixin2Field
// String ownField2
// String mixin1Field
// String ownField1
//method fieldsToJson override
  void fieldsToJson(Map<dynamic, dynamic> target) {
//compiled method
//@FieldAnnotation
    {
      const name = "mixin2Field";
      {
        target[name] = this.mixin2Field;
      }
    }
    {
      const name = "ownField2";
      {
        target[name] = this.ownField2;
      }
    }
    {
      const name = "mixin1Field";
      {
        target[name] = this.mixin1Field;
      }
    }
    {
      const name = "ownField1";
      {
        target[name] = this.ownField1;
      }
    }
  }
}

// **************************************************************************
// interceptor for [Container]
class $Container extends Container implements Pluggable {
  $Container() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// Map<String,MixinUser1> instancesOfMixinUser1
  Map<String, MixinUser1> get instancesOfMixinUser1 =>
      $om.instancesOfMixinUser1;
// Map<String,TestMixin1> instancesOfTestMixin1
  Map<String, TestMixin1> get instancesOfTestMixin1 =>
      $om.instancesOfTestMixin1;
// Map<String,TestMixin2> instancesOfTestMixin2
  Map<String, TestMixin2> get instancesOfTestMixin2 =>
      $om.instancesOfTestMixin2;
}

// **************************************************************************
// no interceptor for [Object]
// **************************************************************************
// no interceptor for [String]
// **************************************************************************
// no interceptor for [List<String>]
// **************************************************************************
// no interceptor for [Map<String,String>]
// **************************************************************************
// no interceptor for [T]
// **************************************************************************
// no interceptor for [dynamic]
// **************************************************************************
// no interceptor for [ST]
// **************************************************************************
// no interceptor for [void]
// **************************************************************************
// no interceptor for [Map<String,MixinUser1>]
// **************************************************************************
// no interceptor for [Map<String,TestMixin1>]
// **************************************************************************
// no interceptor for [Map<String,TestMixin2>]
// **************************************************************************
// no interceptor for [Map<dynamic,dynamic>]
// **************************************************************************
// **************************************************************************
class $ObjectManager {
  $MixinUser1? _mixinUser1;
  $MixinUser1 get mixinUser1 {
    if (_mixinUser1 == null) {
      _mixinUser1 = new $MixinUser1();
    }
    return _mixinUser1 as $MixinUser1;
  }

  $MixinUser2? _mixinUser2;
  $MixinUser2 get mixinUser2 {
    if (_mixinUser2 == null) {
      _mixinUser2 = new $MixinUser2();
    }
    return _mixinUser2 as $MixinUser2;
  }

  $Container? _container;
  $Container get container {
    if (_container == null) {
      _container = new $Container();
    }
    return _container as $Container;
  }

  Map<String, MixinUser1>? _instancesOfMixinUser1;
  Map<String, MixinUser1> get instancesOfMixinUser1 {
    if (_instancesOfMixinUser1 != null) return _instancesOfMixinUser1!;
    return _instancesOfMixinUser1 = {
      "MixinUser1": mixinUser1,
      "MixinUser2": mixinUser2,
    };
  }

  Map<String, TestMixin1>? _instancesOfTestMixin1;
  Map<String, TestMixin1> get instancesOfTestMixin1 {
    if (_instancesOfTestMixin1 != null) return _instancesOfTestMixin1!;
    return _instancesOfTestMixin1 = {
      "MixinUser1": mixinUser1,
      "MixinUser2": mixinUser2,
    };
  }

  Map<String, TestMixin2>? _instancesOfTestMixin2;
  Map<String, TestMixin2> get instancesOfTestMixin2 {
    if (_instancesOfTestMixin2 != null) return _instancesOfTestMixin2!;
    return _instancesOfTestMixin2 = {
      "MixinUser2": mixinUser2,
    };
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 3ms
