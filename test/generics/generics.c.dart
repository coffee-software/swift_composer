// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'generics.dart';

// **************************************************************************
// SwiftGenerator
// **************************************************************************

// **************************************************************************
// generated by swift_composer at 2022-02-13 19:49:20.579231
// config file for module_test: /home/fsw/workspace/swift_composer/test/lib/foo.di.yaml
// **************************************************************************
// ALL TYPES INFO
// **************************************************************************
// SubtypesOf => SubtypesOf  GENERIC [T = T   47246589 = 47246589   47246589 = TypeParameterTypeImpl]
// AnnotatedWith => AnnotatedWith   [      ]
// Pluggable => Pluggable   [      ]
// TypePlugin => TypePlugin  GENERIC [T = T   69357257 = 69357257   69357257 = TypeParameterTypeImpl]
// module_test.Foo => module_test.Foo INTERCEPTED  [      ]
// module_test.FooChild => module_test.FooChild INTERCEPTED  [      ]
// module_test.FooChild2 => module_test.FooChild2 INTERCEPTED  [      ]
// Generic => Generic  GENERIC [T = T,F = F   502576142 = 502576142,480821881 = 480821881   502576142 = TypeParameterTypeImpl,480821881 = TypeParameterTypeImpl]
// Generic2 => Generic2  GENERIC [T = A,F = FooChild,A = A   502576142 = 451805482,480821881 = 254487975,451805482 = 451805482   502576142 = TypeParameterTypeImpl,480821881 = InterfaceTypeImpl,451805482 = TypeParameterTypeImpl]
// TypedGeneric2 => TypedGeneric2 INTERCEPTED  [A = Foo,T = Foo,F = FooChild   451805482 = 160765256,502576142 = 160765256,480821881 = 254487975   451805482 = InterfaceTypeImpl,502576142 = InterfaceTypeImpl,480821881 = InterfaceTypeImpl]
// Object => Object   [      ]
// String => String   [T = String   459756122 = 153217077   459756122 = InterfaceTypeImpl]
// List<String> => List<String>   [T = E,E = String   194905962 = 40007411,40007411 = 153217077   194905962 = TypeParameterTypeImpl,40007411 = InterfaceTypeImpl]
// T => T   [      ]
// List<T> => List<T>   [T = E,E = T   194905962 = 40007411,40007411 = 47246589   194905962 = TypeParameterTypeImpl,40007411 = TypeParameterTypeImpl]
// dynamic => dynamic   [      ]
// ST => ST   [      ]
// int => int   [T = num   459756122 = 148975391   459756122 = InterfaceTypeImpl]
// double => double   [T = num   459756122 = 148975391   459756122 = InterfaceTypeImpl]
// bool => bool   [      ]
// F => F   [      ]
// Map<String,F> => Map<String,F>   [K = String,V = F   339746579 = 153217077,119869657 = 480821881   339746579 = InterfaceTypeImpl,119869657 = TypeParameterTypeImpl]
// A => A   [      ]
// Generic<A,module_test.FooChild> => Generic<A,module_test.FooChild>   [T = A,F = FooChild   502576142 = 451805482,480821881 = 254487975   502576142 = TypeParameterTypeImpl,480821881 = InterfaceTypeImpl]
// Map<String,module_test.FooChild> => Map<String,module_test.FooChild>   [K = String,V = F   339746579 = 153217077,119869657 = 480821881   339746579 = InterfaceTypeImpl,119869657 = TypeParameterTypeImpl]
// Generic2<module_test.Foo> => Generic2<module_test.Foo> INTERCEPTED  [T = A,F = FooChild,A = Foo   502576142 = 451805482,480821881 = 254487975,451805482 = 160765256   502576142 = TypeParameterTypeImpl,480821881 = InterfaceTypeImpl,451805482 = InterfaceTypeImpl]
// Generic<module_test.Foo,module_test.FooChild> => Generic<module_test.Foo,module_test.FooChild>   [T = Foo,F = FooChild   502576142 = 160765256,480821881 = 254487975   502576142 = InterfaceTypeImpl,480821881 = InterfaceTypeImpl]
// **************************************************************************
// no interceptor for [SubtypesOf]
// type arguments[1]:
// T[47246589] => T[47246589]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 47246589
// argument: T 47246589
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [AnnotatedWith]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: AnnotatedWith 1
// TYPE PATH:
//  AnnotatedWith
// **************************************************************************
// no interceptor for [Pluggable]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Pluggable 1
// TYPE PATH:
//  Pluggable
// **************************************************************************
// no interceptor for [TypePlugin]
// type arguments[1]:
// T[69357257] => T[69357257]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 69357257
// argument: T 69357257
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// interceptor for [module_test.Foo]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: module_test.Foo 1
// config: stringField FooField
// config: integerField 124
// TYPE PATH:
//  module_test.Foo
class $module_test_Foo extends module_test.Foo implements Pluggable {
  $module_test_Foo() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String className
// c: String
  String get className => "module_test.Foo";
// String stringField
// c: String
  String get stringField => "FooField";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [module_test.FooChild]
// type arguments[1]:
// type arguments[2]:
// can be singleton: TRUE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild 1
// config: stringField FooChildField
// config: doubleField 0.55
// config: booleanField true
// config: module_test.Foo 2
// config: integerField 124
// TYPE PATH:
//  module_test.FooChild
//  module_test.Foo
class $module_test_FooChild extends module_test.FooChild implements Pluggable {
  $module_test_FooChild() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// double doubleField
// c: double
  double get doubleField => 0.55;
// bool booleanField
// c: bool
  bool get booleanField => true;
// String className
// c: String
  String get className => "module_test.FooChild";
// String stringField
// c: String
  String get stringField => "FooChildField";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// interceptor for [module_test.FooChild2]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Foo [@bool get Compose]
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Pluggable []
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 1
// config: stringField FooChild2Field
// config: doubleField 0.55
// config: booleanField true
// config: module_test.Foo 2
// config: integerField 124
// TYPE PATH:
//  module_test.FooChild2
//  module_test.Foo
class $module_test_FooChild2 extends module_test.FooChild2
    implements Pluggable {
  $module_test_FooChild2(requiredString) {
//String
    this.requiredString = requiredString;
  }
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// String requiredString
// c: String
// String className
// c: String
  String get className => "module_test.FooChild2";
// String stringField
// c: String
  String get stringField => "FooChild2Field";
// int integerField
// c: int
  int get integerField => 124;
}

// **************************************************************************
// no interceptor for [Generic]
// type arguments[1]:
// T[502576142] => T[502576142]
// F extends Foo[480821881] => F[480821881]
// type arguments[2]:
// can be singleton: FALSE
// parameter: T 502576142
// parameter: F 480821881
// argument: T 502576142
// argument: F 480821881
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Generic 1
// TYPE PATH:
//  Generic
// **************************************************************************
// no interceptor for [Generic2]
// type arguments[1]:
// T[502576142] => A[451805482]
// F extends Foo[480821881] => FooChild[254487975]
// A[451805482] => A[451805482]
// type arguments[2]:
// can be singleton: FALSE
// parameter: A 451805482
// argument: A 451805482
// parent: Generic [@bool get ComposeSubtypes]
// parameter: T 502576142
// parameter: F 480821881
// argument: A 451805482
// argument: FooChild 254487975
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Generic2 1
// config: Generic 2
// TYPE PATH:
//  Generic2
//  Generic
// **************************************************************************
// interceptor for [TypedGeneric2]
// type arguments[1]:
// A[451805482] => Foo[160765256]
// T[502576142] => Foo[160765256]
// F extends Foo[480821881] => FooChild[254487975]
// type arguments[2]:
// can be singleton: TRUE
// parent: Generic2 [@bool get Compose]
// parameter: A 451805482
// argument: Foo 160765256
// parent: Generic [@bool get ComposeSubtypes]
// parameter: T 502576142
// parameter: F 480821881
// argument: Foo 160765256
// argument: FooChild 254487975
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: TypedGeneric2 1
// config: Generic2 2
// config: Generic 3
// TYPE PATH:
//  TypedGeneric2
//  Generic2
//  Generic
class $TypedGeneric2 extends TypedGeneric2 implements Pluggable {
  $TypedGeneric2() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// Map<String,module_test.FooChild> instancesOfFoo
// c: Map<String,module_test.FooChild>
  Map<String, module_test.FooChild> get instancesOfFoo =>
      $om.instancesOfmodule_test_FooChild;
  module_test.FooChild factoryForFoo(String className) {
    switch (className) {
      case 'module_test.FooChild':
        return new $module_test_FooChild();
    }
    throw new Exception('no type for ' + className);
  }
}

// **************************************************************************
// no interceptor for [Object]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Object 1
// TYPE PATH:
//  Object
// **************************************************************************
// no interceptor for [String]
// type arguments[1]:
// T[459756122] => String[153217077]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: String 153217077
// parent: Pattern []
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: String 1
// TYPE PATH:
//  String
// **************************************************************************
// no interceptor for [List<String>]
// type arguments[1]:
// T[194905962] => E[40007411]
// E[37912016] => E[40007411]
// E[40007411] => String[153217077]
// type arguments[2]:
// ENCLOSING: XXX
// String[1056732918]
// can be singleton: FALSE
// parameter: E 40007411
// argument: E 40007411
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 194905962
// argument: E 40007411
// parent: Iterable []
// parameter: E 37912016
// argument: E 40007411
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [T]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [List<T>]
// type arguments[1]:
// T[194905962] => E[40007411]
// E[37912016] => E[40007411]
// E[40007411] => T[47246589]
// type arguments[2]:
// ENCLOSING: NULL
// T[339816423]
// can be singleton: FALSE
// parameter: E 40007411
// argument: E 40007411
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: EfficientLengthIterable []
// parameter: T 194905962
// argument: E 40007411
// parent: Iterable []
// parameter: E 37912016
// argument: E 40007411
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: List 1
// TYPE PATH:
//  List
// **************************************************************************
// no interceptor for [dynamic]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [ST]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [int]
// type arguments[1]:
// T[459756122] => num[148975391]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: num 148975391
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: int 1
// config: num 2
// TYPE PATH:
//  int
//  num
// **************************************************************************
// no interceptor for [double]
// type arguments[1]:
// T[459756122] => num[148975391]
// type arguments[2]:
// can be singleton: FALSE
// parent: num []
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: num 148975391
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: double 1
// config: num 2
// TYPE PATH:
//  double
//  num
// **************************************************************************
// no interceptor for [bool]
// type arguments[1]:
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: bool 1
// TYPE PATH:
//  bool
// **************************************************************************
// no interceptor for [F]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [Map<String,F>]
// type arguments[1]:
// K[339746579] => String[153217077]
// V[119869657] => F[480821881]
// type arguments[2]:
// ENCLOSING: XXX
// String[1056732918]
// ENCLOSING: NULL
// F[1049837780]
// can be singleton: FALSE
// parameter: K 339746579
// parameter: V 119869657
// argument: K 339746579
// argument: V 119869657
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Map 1
// TYPE PATH:
//  Map
// **************************************************************************
// no interceptor for [A]
// type arguments[1]:
// type arguments[2]:
// **************************************************************************
// no interceptor for [Generic<A,module_test.FooChild>]
// type arguments[1]:
// T[502576142] => A[451805482]
// F extends Foo[480821881] => FooChild[254487975]
// type arguments[2]:
// ENCLOSING: NULL
// A[778908273]
// ENCLOSING: XXX
// FooChild[544633404]
// can be singleton: FALSE
// parameter: T 502576142
// parameter: F 480821881
// argument: T 502576142
// argument: F 480821881
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Generic 1
// TYPE PATH:
//  Generic
// **************************************************************************
// no interceptor for [Map<String,module_test.FooChild>]
// type arguments[1]:
// K[339746579] => String[153217077]
// V[119869657] => F[480821881]
// type arguments[2]:
// ENCLOSING: XXX
// String[1056732918]
// ENCLOSING: XXX
// FooChild[544633404]
// can be singleton: FALSE
// parameter: K 339746579
// parameter: V 119869657
// argument: K 339746579
// argument: V 119869657
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Map 1
// TYPE PATH:
//  Map
// **************************************************************************
// interceptor for [Generic2<module_test.Foo>]
// type arguments[1]:
// T[502576142] => A[451805482]
// F extends Foo[480821881] => FooChild[254487975]
// A[451805482] => Foo[160765256]
// type arguments[2]:
// ENCLOSING: XXX
// Foo[643402843]
// can be singleton: TRUE
// parameter: A 451805482
// argument: A 451805482
// parent: Generic [@bool get ComposeSubtypes]
// parameter: T 502576142
// parameter: F 480821881
// argument: A 451805482
// argument: FooChild 254487975
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Generic2 1
// config: Generic 2
// TYPE PATH:
//  Generic2
//  Generic
//parametrized type
class $Generic2_module_test_Foo_ extends Generic2<module_test.Foo>
    implements Pluggable {
  $Generic2() {}
  T plugin<T>() {
    throw new Exception('no plugin for this type');
  }

// Map<String,module_test.FooChild> instancesOfFoo
// c: Map<String,module_test.FooChild>
  Map<String, module_test.FooChild> get instancesOfFoo =>
      $om.instancesOfmodule_test_FooChild;
  module_test.FooChild factoryForFoo(String className) {
    switch (className) {
      case 'module_test.FooChild':
        return new $module_test_FooChild();
    }
    throw new Exception('no type for ' + className);
  }
}

// **************************************************************************
// no interceptor for [Generic<module_test.Foo,module_test.FooChild>]
// type arguments[1]:
// T[502576142] => Foo[160765256]
// F extends Foo[480821881] => FooChild[254487975]
// type arguments[2]:
// ENCLOSING: XXX
// Foo[643402843]
// ENCLOSING: XXX
// FooChild[544633404]
// can be singleton: FALSE
// parameter: T 502576142
// parameter: F 480821881
// argument: T 502576142
// argument: F 480821881
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Generic 1
// TYPE PATH:
//  Generic
// **************************************************************************
// no interceptor for [SubtypesOf<T>]
// type arguments[1]:
// T[47246589] => T[47246589]
// type arguments[2]:
// ENCLOSING: NULL
// T[339816423]
// can be singleton: FALSE
// parameter: T 47246589
// argument: T 47246589
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: SubtypesOf 1
// TYPE PATH:
//  SubtypesOf
// **************************************************************************
// no interceptor for [TypePlugin<T>]
// type arguments[1]:
// T[69357257] => T[69357257]
// type arguments[2]:
// ENCLOSING: NULL
// T[339816423]
// can be singleton: FALSE
// parameter: T 69357257
// argument: T 69357257
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: TypePlugin 1
// TYPE PATH:
//  TypePlugin
// **************************************************************************
// no interceptor for [Generic<T,F>]
// type arguments[1]:
// T[502576142] => T[502576142]
// F extends Foo[480821881] => F[480821881]
// type arguments[2]:
// ENCLOSING: NULL
// T[339816423]
// ENCLOSING: NULL
// F[1049837780]
// can be singleton: FALSE
// parameter: T 502576142
// parameter: F 480821881
// argument: T 502576142
// argument: F 480821881
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Generic 1
// TYPE PATH:
//  Generic
// **************************************************************************
// no interceptor for [Generic2<A>]
// type arguments[1]:
// T[502576142] => A[451805482]
// F extends Foo[480821881] => FooChild[254487975]
// A[451805482] => A[451805482]
// type arguments[2]:
// ENCLOSING: NULL
// A[778908273]
// can be singleton: FALSE
// parameter: A 451805482
// argument: A 451805482
// parent: Generic [@bool get ComposeSubtypes]
// parameter: T 502576142
// parameter: F 480821881
// argument: A 451805482
// argument: FooChild 254487975
// parent: Object [@pragma pragma(String name, [Object? options])]
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: Generic2 1
// config: Generic 2
// TYPE PATH:
//  Generic2
//  Generic
// **************************************************************************
// no interceptor for [num]
// type arguments[1]:
// T[459756122] => num[148975391]
// type arguments[2]:
// can be singleton: FALSE
// parent: Object [@pragma pragma(String name, [Object? options])]
// parent: Comparable []
// parameter: T 459756122
// argument: num 148975391
// CONFIG
// config: module_test.Foo {stringField: FooField, integerField: 124}
// config: module_test.FooChild {stringField: FooChildField, doubleField: 0.55, booleanField: true}
// config: module_test.FooChild2 {stringField: FooChild2Field, doubleField: 0.55, booleanField: true}
// config: num 1
// TYPE PATH:
//  num
// **************************************************************************
class $ObjectManager {
  $module_test_Foo? _module_test_Foo;
  $module_test_Foo get module_test_Foo {
    if (_module_test_Foo == null) {
      _module_test_Foo = new $module_test_Foo();
    }
    return _module_test_Foo as $module_test_Foo;
  }

  $module_test_FooChild? _module_test_FooChild;
  $module_test_FooChild get module_test_FooChild {
    if (_module_test_FooChild == null) {
      _module_test_FooChild = new $module_test_FooChild();
    }
    return _module_test_FooChild as $module_test_FooChild;
  }

  $TypedGeneric2? _typedGeneric2;
  $TypedGeneric2 get typedGeneric2 {
    if (_typedGeneric2 == null) {
      _typedGeneric2 = new $TypedGeneric2();
    }
    return _typedGeneric2 as $TypedGeneric2;
  }

  $Generic2_module_test_Foo_? _generic2_module_test_Foo_;
  $Generic2_module_test_Foo_ get generic2_module_test_Foo_ {
    if (_generic2_module_test_Foo_ == null) {
      _generic2_module_test_Foo_ = new $Generic2_module_test_Foo_();
    }
    return _generic2_module_test_Foo_ as $Generic2_module_test_Foo_;
  }

  Map<String, module_test.FooChild> get instancesOfmodule_test_FooChild {
    return {
      "module_test.FooChild": new $module_test_FooChild(),
    };
  }
}

$ObjectManager $om = new $ObjectManager();
//generated in 5ms
